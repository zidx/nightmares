
lab4.elf:     file format elf32-littlenios2
lab4.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00001020

Program Header:
    LOAD off    0x00001000 vaddr 0x00001000 paddr 0x00001000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00001020 paddr 0x00001020 align 2**12
         filesz 0x00000264 memsz 0x00000264 flags r-x
    LOAD off    0x00001284 vaddr 0x00001284 paddr 0x00001288 align 2**12
         filesz 0x00000004 memsz 0x00000004 flags rw-
    LOAD off    0x0000128c vaddr 0x0000128c paddr 0x0000128c align 2**12
         filesz 0x00000000 memsz 0x0000000c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00001000  00001000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         0000024c  00001020  00001020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0000126c  0000126c  0000126c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .rwdata       00000004  00001284  00001288  00001284  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  4 .bss          0000000c  0000128c  0000128c  0000128c  2**2
                  ALLOC, SMALL_DATA
  5 .comment      00000023  00000000  00000000  00001288  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000168  00000000  00000000  000012b0  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000b8f  00000000  00000000  00001418  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000694  00000000  00000000  00001fa7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000007e3  00000000  00000000  0000263b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000178  00000000  00000000  00002e20  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000052a  00000000  00000000  00002f98  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000019f  00000000  00000000  000034c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_alt_sim_info 00000010  00000000  00000000  00003664  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000078  00000000  00000000  00003678  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .thread_model 00000003  00000000  00000000  000043cf  2**0
                  CONTENTS, READONLY
 16 .cpu          0000000f  00000000  00000000  000043d2  2**0
                  CONTENTS, READONLY
 17 .qsys         00000001  00000000  00000000  000043e1  2**0
                  CONTENTS, READONLY
 18 .simulation_enabled 00000001  00000000  00000000  000043e2  2**0
                  CONTENTS, READONLY
 19 .stderr_dev   00000009  00000000  00000000  000043e3  2**0
                  CONTENTS, READONLY
 20 .stdin_dev    00000009  00000000  00000000  000043ec  2**0
                  CONTENTS, READONLY
 21 .stdout_dev   00000009  00000000  00000000  000043f5  2**0
                  CONTENTS, READONLY
 22 .sopc_system_name 0000000c  00000000  00000000  000043fe  2**0
                  CONTENTS, READONLY
 23 .quartus_project_dir 00000038  00000000  00000000  0000440a  2**0
                  CONTENTS, READONLY
 24 .sopcinfo     00053146  00000000  00000000  00004442  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00001000 l    d  .entry	00000000 .entry
00001020 l    d  .text	00000000 .text
0000126c l    d  .rodata	00000000 .rodata
00001284 l    d  .rwdata	00000000 .rwdata
0000128c l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../lab4_bsp//obj/HAL/src/crt0.o
00001058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 
00001178 g     F .text	0000002c alt_main
00001288 g       *ABS*	00000000 __flash_rwdata_start
000011a4 g     F .text	00000038 alt_putstr
00001284 g     O .rwdata	00000004 jtag_uart
00001000 g     F .entry	0000000c __reset
00001020 g       *ABS*	00000000 __flash_exceptions_start
00001290 g     O .bss	00000004 alt_argv
00009284 g       *ABS*	00000000 _gp
00001298 g       *ABS*	00000000 __bss_end
00001234 g     F .text	00000004 alt_dcache_flush_all
00001288 g       *ABS*	00000000 __ram_rwdata_end
00001000 g       *ABS*	00000000 __alt_mem_onchip_memory
00001284 g       *ABS*	00000000 __ram_rodata_end
00001298 g       *ABS*	00000000 end
00002000 g       *ABS*	00000000 __alt_stack_pointer
00001200 g     F .text	00000034 altera_avalon_jtag_uart_write
00001020 g     F .text	0000003c _start
000011fc g     F .text	00000004 alt_sys_init
00001284 g       *ABS*	00000000 __ram_rwdata_start
0000126c g       *ABS*	00000000 __ram_rodata_start
00001298 g       *ABS*	00000000 __alt_stack_base
0000128c g       *ABS*	00000000 __bss_start
0000105c g     F .text	00000018 main
0000128c g     O .bss	00000004 alt_envp
0000126c g       *ABS*	00000000 __flash_rodata_start
000011dc g     F .text	00000020 alt_irq_init
00001294 g     O .bss	00000004 alt_argc
00001020 g       *ABS*	00000000 __ram_exceptions_start
00001288 g       *ABS*	00000000 _edata
00001298 g       *ABS*	00000000 _end
00001020 g       *ABS*	00000000 __ram_exceptions_end
0000123c g     F .text	00000008 altera_nios2_qsys_irq_init
00002000 g       *ABS*	00000000 __alt_data_end
0000100c g       .entry	00000000 _exit
00001244 g     F .text	00000028 strlen
00001238 g     F .text	00000004 alt_icache_flush_all
00001074 g     F .text	00000104 alt_load



Disassembly of section .entry:

00001000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    1000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    1004:	08440814 	ori	at,at,4128
    jmp r1
    1008:	0800683a 	jmp	at

0000100c <_exit>:
	...

Disassembly of section .text:

00001020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    1020:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    1024:	dec80014 	ori	sp,sp,8192
    movhi gp, %hi(_gp)
    1028:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
    102c:	d6a4a114 	ori	gp,gp,37508
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    1030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    1034:	1084a314 	ori	r2,r2,4748

    movhi r3, %hi(__bss_end)
    1038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    103c:	18c4a614 	ori	r3,r3,4760

    beq r2, r3, 1f
    1040:	10c00326 	beq	r2,r3,1050 <_start+0x30>

0:
    stw zero, (r2)
    1044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    1048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    104c:	10fffd36 	bltu	r2,r3,1044 <_gp+0xffff7dc0>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    1050:	00010740 	call	1074 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    1054:	00011780 	call	1178 <alt_main>

00001058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    1058:	003fff06 	br	1058 <_gp+0xffff7dd4>

0000105c <main>:
 */

#include "sys/alt_stdio.h"

int main()
{ 
    105c:	deffff04 	addi	sp,sp,-4
  alt_putstr("Hello from Nios II!\n");
    1060:	01000034 	movhi	r4,0
    1064:	21049b04 	addi	r4,r4,4716
 */

#include "sys/alt_stdio.h"

int main()
{ 
    1068:	dfc00015 	stw	ra,0(sp)
  alt_putstr("Hello from Nios II!\n");
    106c:	00011a40 	call	11a4 <alt_putstr>
    1070:	003fff06 	br	1070 <_gp+0xffff7dec>

00001074 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    1074:	deffff04 	addi	sp,sp,-4
    1078:	dfc00015 	stw	ra,0(sp)
    107c:	00c00034 	movhi	r3,0
    1080:	18c4a104 	addi	r3,r3,4740
    1084:	01000034 	movhi	r4,0
    1088:	2104a204 	addi	r4,r4,4744

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    108c:	1900061e 	bne	r3,r4,10a8 <alt_load+0x34>
    1090:	00c00034 	movhi	r3,0
    1094:	18c40804 	addi	r3,r3,4128
    1098:	01000034 	movhi	r4,0
    109c:	21040804 	addi	r4,r4,4128
    10a0:	1900151e 	bne	r3,r4,10f8 <alt_load+0x84>
    10a4:	00000e06 	br	10e0 <alt_load+0x6c>
 * alt_load() is called when the code is executing from flash. In this case
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
    10a8:	01400034 	movhi	r5,0
    10ac:	2944a204 	addi	r5,r5,4744
    10b0:	00bfff04 	movi	r2,-4
    10b4:	28cbc83a 	sub	r5,r5,r3
    10b8:	288a703a 	and	r5,r5,r2
    10bc:	0005883a 	mov	r2,zero
    10c0:	00000506 	br	10d8 <alt_load+0x64>
    10c4:	208f883a 	add	r7,r4,r2
  {
    while( to != end )
    {
      *to++ = *from++;
    10c8:	39c00017 	ldw	r7,0(r7)
    10cc:	188d883a 	add	r6,r3,r2
    10d0:	10800104 	addi	r2,r2,4
    10d4:	31c00015 	stw	r7,0(r6)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    10d8:	117ffa1e 	bne	r2,r5,10c4 <_gp+0xffff7e40>
    10dc:	003fec06 	br	1090 <_gp+0xffff7e0c>
    10e0:	00c00034 	movhi	r3,0
    10e4:	18c49b04 	addi	r3,r3,4716
    10e8:	01000034 	movhi	r4,0
    10ec:	21049b04 	addi	r4,r4,4716

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    10f0:	1900131e 	bne	r3,r4,1140 <alt_load+0xcc>
    10f4:	00000e06 	br	1130 <alt_load+0xbc>
    10f8:	01400034 	movhi	r5,0
    10fc:	29440804 	addi	r5,r5,4128
    1100:	00bfff04 	movi	r2,-4
    1104:	28cbc83a 	sub	r5,r5,r3
    1108:	288a703a 	and	r5,r5,r2
    110c:	0005883a 	mov	r2,zero
    1110:	00000506 	br	1128 <alt_load+0xb4>
    1114:	208f883a 	add	r7,r4,r2
  {
    while( to != end )
    {
      *to++ = *from++;
    1118:	39c00017 	ldw	r7,0(r7)
    111c:	188d883a 	add	r6,r3,r2
    1120:	10800104 	addi	r2,r2,4
    1124:	31c00015 	stw	r7,0(r6)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    1128:	117ffa1e 	bne	r2,r5,1114 <_gp+0xffff7e90>
    112c:	003fec06 	br	10e0 <_gp+0xffff7e5c>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    1130:	00012340 	call	1234 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    1134:	dfc00017 	ldw	ra,0(sp)
    1138:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    113c:	00012381 	jmpi	1238 <alt_icache_flush_all>
 * alt_load() is called when the code is executing from flash. In this case
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
    1140:	01400034 	movhi	r5,0
    1144:	2944a104 	addi	r5,r5,4740
    1148:	00bfff04 	movi	r2,-4
    114c:	28cbc83a 	sub	r5,r5,r3
    1150:	288a703a 	and	r5,r5,r2
    1154:	0005883a 	mov	r2,zero
    1158:	00000506 	br	1170 <alt_load+0xfc>
    115c:	208f883a 	add	r7,r4,r2
    {
      *to++ = *from++;
    1160:	39c00017 	ldw	r7,0(r7)
    1164:	188d883a 	add	r6,r3,r2
    1168:	10800104 	addi	r2,r2,4
    116c:	31c00015 	stw	r7,0(r6)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    1170:	117ffa1e 	bne	r2,r5,115c <_gp+0xffff7ed8>
    1174:	003fee06 	br	1130 <_gp+0xffff7eac>

00001178 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    1178:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    117c:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    1180:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    1184:	00011dc0 	call	11dc <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    1188:	00011fc0 	call	11fc <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    118c:	d1200417 	ldw	r4,-32752(gp)
    1190:	d1600317 	ldw	r5,-32756(gp)
    1194:	d1a00217 	ldw	r6,-32760(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    1198:	dfc00017 	ldw	ra,0(sp)
    119c:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    11a0:	000105c1 	jmpi	105c <main>

000011a4 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
    11a4:	defffe04 	addi	sp,sp,-8
    11a8:	dc000015 	stw	r16,0(sp)
    11ac:	dfc00115 	stw	ra,4(sp)
    11b0:	2021883a 	mov	r16,r4
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    11b4:	00012440 	call	1244 <strlen>
    11b8:	01000034 	movhi	r4,0
    11bc:	2104a104 	addi	r4,r4,4740
    11c0:	800b883a 	mov	r5,r16
    11c4:	100d883a 	mov	r6,r2
    11c8:	000f883a 	mov	r7,zero
#else
    return fputs(str, stdout);
#endif
}
    11cc:	dfc00117 	ldw	ra,4(sp)
    11d0:	dc000017 	ldw	r16,0(sp)
    11d4:	dec00204 	addi	sp,sp,8
int 
alt_putstr(const char* str)
{
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    11d8:	00012001 	jmpi	1200 <altera_avalon_jtag_uart_write>

000011dc <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    11dc:	deffff04 	addi	sp,sp,-4
    11e0:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_PROCESSOR, nios2_processor);
    11e4:	000123c0 	call	123c <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    11e8:	00800044 	movi	r2,1
    11ec:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    11f0:	dfc00017 	ldw	ra,0(sp)
    11f4:	dec00104 	addi	sp,sp,4
    11f8:	f800283a 	ret

000011fc <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    11fc:	f800283a 	ret

00001200 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    1200:	20c00017 	ldw	r3,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    1204:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
    1208:	2989883a 	add	r4,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    120c:	19800104 	addi	r6,r3,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    1210:	00000606 	br	122c <altera_avalon_jtag_uart_write+0x2c>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    1214:	31c00037 	ldwio	r7,0(r6)
    1218:	39ffffec 	andhi	r7,r7,65535
    121c:	383ffd26 	beq	r7,zero,1214 <_gp+0xffff7f90>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    1220:	29c00007 	ldb	r7,0(r5)
    1224:	29400044 	addi	r5,r5,1
    1228:	19c00035 	stwio	r7,0(r3)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    122c:	293ff936 	bltu	r5,r4,1214 <_gp+0xffff7f90>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
}
    1230:	f800283a 	ret

00001234 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    1234:	f800283a 	ret

00001238 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    1238:	f800283a 	ret

0000123c <altera_nios2_qsys_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    123c:	000170fa 	wrctl	ienable,zero
    1240:	f800283a 	ret

00001244 <strlen>:
    1244:	20800007 	ldb	r2,0(r4)
    1248:	10000626 	beq	r2,zero,1264 <strlen+0x20>
    124c:	2005883a 	mov	r2,r4
    1250:	10800044 	addi	r2,r2,1
    1254:	10c00007 	ldb	r3,0(r2)
    1258:	183ffd1e 	bne	r3,zero,1250 <_gp+0xffff7fcc>
    125c:	1105c83a 	sub	r2,r2,r4
    1260:	f800283a 	ret
    1264:	0005883a 	mov	r2,zero
    1268:	f800283a 	ret
