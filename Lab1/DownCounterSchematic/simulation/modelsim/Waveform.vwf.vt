// Copyright (C) 1991-2014 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/06/2015 19:59:58"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    DownCounterSchematic
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module DownCounterSchematic_vlg_sample_tst(
	PIN_AB12,
	PIN_AF14,
	sampler_tx
);
input  PIN_AB12;
input  PIN_AF14;
output sampler_tx;

reg sample;
time current_time;
always @(PIN_AB12 or PIN_AF14)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module DownCounterSchematic_vlg_check_tst (
	PIN_V16,
	PIN_V17,
	PIN_V18,
	PIN_W16,
	sampler_rx
);
input  PIN_V16;
input  PIN_V17;
input  PIN_V18;
input  PIN_W16;
input sampler_rx;

reg  PIN_V16_expected;
reg  PIN_V17_expected;
reg  PIN_V18_expected;
reg  PIN_W16_expected;

reg  PIN_V16_prev;
reg  PIN_V17_prev;
reg  PIN_V18_prev;
reg  PIN_W16_prev;

reg  PIN_V16_expected_prev;
reg  PIN_V17_expected_prev;
reg  PIN_V18_expected_prev;
reg  PIN_W16_expected_prev;

reg  last_PIN_V16_exp;
reg  last_PIN_V17_exp;
reg  last_PIN_V18_exp;
reg  last_PIN_W16_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	PIN_V16_prev = PIN_V16;
	PIN_V17_prev = PIN_V17;
	PIN_V18_prev = PIN_V18;
	PIN_W16_prev = PIN_W16;
end

// update expected /o prevs

always @(trigger)
begin
	PIN_V16_expected_prev = PIN_V16_expected;
	PIN_V17_expected_prev = PIN_V17_expected;
	PIN_V18_expected_prev = PIN_V18_expected;
	PIN_W16_expected_prev = PIN_W16_expected;
end



// expected PIN_V16
initial
begin
	PIN_V16_expected = 1'bX;
end 

// expected PIN_V17
initial
begin
	PIN_V17_expected = 1'bX;
end 

// expected PIN_V18
initial
begin
	PIN_V18_expected = 1'bX;
end 

// expected PIN_W16
initial
begin
	PIN_W16_expected = 1'bX;
end 
// generate trigger
always @(PIN_V16_expected or PIN_V16 or PIN_V17_expected or PIN_V17 or PIN_V18_expected or PIN_V18 or PIN_W16_expected or PIN_W16)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected PIN_V16 = %b | expected PIN_V17 = %b | expected PIN_V18 = %b | expected PIN_W16 = %b | ",PIN_V16_expected_prev,PIN_V17_expected_prev,PIN_V18_expected_prev,PIN_W16_expected_prev);
	$display("| real PIN_V16 = %b | real PIN_V17 = %b | real PIN_V18 = %b | real PIN_W16 = %b | ",PIN_V16_prev,PIN_V17_prev,PIN_V18_prev,PIN_W16_prev);
`endif
	if (
		( PIN_V16_expected_prev !== 1'bx ) && ( PIN_V16_prev !== PIN_V16_expected_prev )
		&& ((PIN_V16_expected_prev !== last_PIN_V16_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PIN_V16 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PIN_V16_expected_prev);
		$display ("     Real value = %b", PIN_V16_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_PIN_V16_exp = PIN_V16_expected_prev;
	end
	if (
		( PIN_V17_expected_prev !== 1'bx ) && ( PIN_V17_prev !== PIN_V17_expected_prev )
		&& ((PIN_V17_expected_prev !== last_PIN_V17_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PIN_V17 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PIN_V17_expected_prev);
		$display ("     Real value = %b", PIN_V17_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_PIN_V17_exp = PIN_V17_expected_prev;
	end
	if (
		( PIN_V18_expected_prev !== 1'bx ) && ( PIN_V18_prev !== PIN_V18_expected_prev )
		&& ((PIN_V18_expected_prev !== last_PIN_V18_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PIN_V18 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PIN_V18_expected_prev);
		$display ("     Real value = %b", PIN_V18_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_PIN_V18_exp = PIN_V18_expected_prev;
	end
	if (
		( PIN_W16_expected_prev !== 1'bx ) && ( PIN_W16_prev !== PIN_W16_expected_prev )
		&& ((PIN_W16_expected_prev !== last_PIN_W16_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PIN_W16 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PIN_W16_expected_prev);
		$display ("     Real value = %b", PIN_W16_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PIN_W16_exp = PIN_W16_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#100000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$stop;
end 
endmodule

module DownCounterSchematic_vlg_vec_tst();
// constants                                           
// general purpose registers
reg PIN_AB12;
reg PIN_AF14;
// wires                                               
wire PIN_V16;
wire PIN_V17;
wire PIN_V18;
wire PIN_W16;

wire sampler;                             

// assign statements (if any)                          
DownCounterSchematic i1 (
// port map - connection between master ports and signals/registers   
	.PIN_AB12(PIN_AB12),
	.PIN_AF14(PIN_AF14),
	.PIN_V16(PIN_V16),
	.PIN_V17(PIN_V17),
	.PIN_V18(PIN_V18),
	.PIN_W16(PIN_W16)
);

// PIN_AB12
initial
begin
	PIN_AB12 = 1'b0;
	PIN_AB12 = #20000 1'b1;
	PIN_AB12 = #27180000 1'b0;
end 

// PIN_AF14
always
begin
	PIN_AF14 = 1'b0;
	PIN_AF14 = #10000 1'b1;
	#10000;
end 

DownCounterSchematic_vlg_sample_tst tb_sample (
	.PIN_AB12(PIN_AB12),
	.PIN_AF14(PIN_AF14),
	.sampler_tx(sampler)
);

DownCounterSchematic_vlg_check_tst tb_out(
	.PIN_V16(PIN_V16),
	.PIN_V17(PIN_V17),
	.PIN_V18(PIN_V18),
	.PIN_W16(PIN_W16),
	.sampler_rx(sampler)
);
endmodule

