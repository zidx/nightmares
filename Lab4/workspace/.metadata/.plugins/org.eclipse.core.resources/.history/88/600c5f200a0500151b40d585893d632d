/* 
 * "Small Hello World" example. 
 * 
 * This example prints 'Hello from Nios II' to the STDOUT stream. It runs on
 * the Nios II 'standard', 'full_featured', 'fast', and 'low_cost' example 
 * designs. It requires a STDOUT  device in your system's hardware. 
 *
 * The purpose of this example is to demonstrate the smallest possible Hello 
 * World application, using the Nios II HAL library.  The memory footprint
 * of this hosted application is ~332 bytes by default using the standard 
 * reference design.  For a more fully featured Hello World application
 * example, see the example titled "Hello World".
 *
 * The memory footprint of this example has been reduced by making the
 * following changes to the normal "Hello World" example.
 * Check in the Nios II Software Developers Manual for a more complete S
 * description.
 * 
 * In the SW Application project (small_hello_world):
 *
 *  - In the C/C++ Build page
 * 
 *    - Set the Optimization Level to -Os
 * 
 * In System Library project (small_hello_world_syslib):
 *  - In the C/C++ Build page
 * 
 *    - Set the Optimization Level to -Os
 * 
 *    - Define the preprocessor option ALT_NO_INSTRUCTION_EMULATION 
 *      This removes software exception handling, which means that you cannot 
 *      run code compiled for Nios II cpu with a hardware multiplier on a core 
 *      without a the multiply unit. Check the Nios II Software Developers 
 *      Manual for more details.
 *
 *  - In the System Library page:
 *    - Set Periodic system timer and Timestamp timer to none
 *      This prevents the automatic inclusion of the timer driver.
 *
 *    - Set Max file descriptors to 4
 *      This reduces the size of the file handle pool.
 *
 *    - Check Main function does not exit
 *    - Uncheck Clean exit (flush buffers)
 *      This removes the unneeded call to exit when main returns, since it
 *      won't.
 *
 *    - Check Don't use C++
 *      This builds without the C++ support code.
 *
 *    - Check Small C library
 *      This uses a reduced functionality C library, which lacks  
 *      support for buffering, file IO, floating point and getch(), etc. 
 *      Check the Nios II Software Developers Manual for a complete list.
 *
 *    - Check Reduced device drivers
 *      This uses reduced functionality drivers if they're available. For the
 *      standard design this means you get polled UART and JTAG UART drivers,
 *      no support for the LCD driver and you lose the ability to program 
 *      CFI compliant flash devices.
 *
 *    - Check Access device drivers directly
 *      This bypasses the device file system to access device drivers directly.
 *      This eliminates the space required for the device file system services.
 *      It also provides a HAL version of libc services that access the drivers
 *      directly, further reducing space. Only a limited number of libc
 *      functions are available in this configuration.
 *
 *    - Use ALT versions of stdio routines:
 *
 *           Function                  Description
 *        ===============  =====================================
 *        alt_printf       Only supports %s, %x, and %c ( < 1 Kbyte)
 *        alt_putstr       Smaller overhead than puts with direct drivers
 *                         Note this function doesn't add a newline.
 *        alt_putchar      Smaller overhead than putchar with direct drivers
 *        alt_getchar      Smaller overhead than getchar with direct drivers
 *
 */

#include "sys/alt_stdio.h"
#include "altera_avalon_pio_regs.h"

#define rtd (volatile char *) 	 	 0x0003060
#define outSignal (volatile char *)  0x0003050
#define curByteOut (volatile char *) 0x0003040
#define inStrobe (volatile char *)   0x0003030
#define load (volatile char *) 		 0x0003020
#define curByteIn (volatile char *)  0x0003010
#define hempTea (volatile char *)    0x0003000

int main() {
	IOWR_ALTERA_AVALON_PIO_DATA(load, 0x0);
	alt_u8 readyToDownload;
	alt_u8 curOutSignal;
	alt_u8 curByteInVal = IORD_ALTERA_AVALON_PIO_DATA(curByteIn);
	alt_u8 hempTeaVal = IORD_ALTERA_AVALON_PIO_DATA(hempTea);
	alt_u8 inStrobeVal = IORD_ALTERA_AVALON_PIO_DATA(inStrobe);



	alt_printf("Initial curByteInVal %x \n", curByteInVal);
	alt_printf("Initial inStrobeVal %x \n", inStrobeVal);
	alt_printf("Initial hempTeaVal %x \n", hempTeaVal);

	IOWR_ALTERA_AVALON_PIO_DATA(load, 0x0);

	alt_u8 prevVal = curByteInVal;
	//alt_u8 prevStrobe = inStrobeVal;

	alt_printf("\nInitial prevVal %c \n", curByteInVal);

	//IOWR_ALTERA_AVALON_PIO_DATA(outSignal, 0x0);
	char start = 'a';
	while(start != 'S') {
		alt_putstr("Enter a S to begin the process: ");
		start = alt_getchar();
	}
	//IOWR_ALTERA_AVALON_PIO_DATA(outSignal, 0x2);


	while (1) {
			IOWR_ALTERA_AVALON_PIO_DATA(load, 0x0);

			readyToDownload = IORD_ALTERA_AVALON_PIO_DATA(rtd);
			curOutSignal = IORD_ALTERA_AVALON_PIO_DATA(outSignal);
			hempTeaVal = IORD_ALTERA_AVALON_PIO_DATA(hempTea);

			alt_printf("Loop readyToDownload %x \n", readyToDownload);
			alt_printf("Loop curOutSignal %x \n", curOutSignal);
			alt_printf("Loop hempTeaVal %x \n", hempTeaVal);

			alt_u8 temp_load = IORD_ALTERA_AVALON_PIO_DATA(load);
			alt_printf("Loop temp_load (0) %x\n", temp_load);

			// Catch the extra
			alt_getchar();


			//while(1) {
			//				hempTeaVal = IORD_ALTERA_AVALON_PIO_DATA(hempTea);
			//				alt_printf("hempTea %x\n", hempTeaVal);
			//

			// Get the character to send
			alt_putstr("Enter a character to send: ");
			start = alt_getchar();
			IOWR_ALTERA_AVALON_PIO_DATA(curByteOut, start);

			alt_printf("Expected character out: ");
			alt_printf("%c \n", start);

			IOWR_ALTERA_AVALON_PIO_DATA(load, 0x1);

			temp_load = IORD_ALTERA_AVALON_PIO_DATA(load);
			alt_printf("temp_load (1) %x\n", temp_load);


			/*while(1) {
				hempTeaVal = IORD_ALTERA_AVALON_PIO_DATA(hempTea);
				alt_printf("hempTea %x\n", hempTeaVal);
			}*/

			alt_u8 start_char = IORD_ALTERA_AVALON_PIO_DATA(curByteOut);
			alt_printf("Expected character again: ");
			alt_printf("%x \n", start_char);


//			hempTeaVal = IORD_ALTERA_AVALON_PIO_DATA(hempTea);
			alt_printf("Waiting for Empty");
			int count = 0;
			int wait_value = 10000;
////
			while(hempTeaVal == 0) {
				if(count % wait_value == 0) alt_printf(".");
				count++;
				count %= wait_value;
				hempTeaVal = IORD_ALTERA_AVALON_PIO_DATA(hempTea);
			}
			alt_printf("\n");

			IOWR_ALTERA_AVALON_PIO_DATA(load, 0x0);

			temp_load = IORD_ALTERA_AVALON_PIO_DATA(load);
			alt_printf("temp_load (0) %x\n", temp_load);

			count = 0;
			alt_printf("Waiting for Strobe");

			inStrobeVal = IORD_ALTERA_AVALON_PIO_DATA(inStrobe);
			while(inStrobeVal == 0) { // possible infinite loop
				if(count % wait_value == 0) alt_printf(".");
				count++;
				count %= wait_value;
				inStrobeVal = IORD_ALTERA_AVALON_PIO_DATA(inStrobe);
			}
			curByteInVal = IORD_ALTERA_AVALON_PIO_DATA(curByteIn);
			alt_printf("\n");

			alt_printf("Downloading byte input: ");
			alt_printf("%x ", curByteInVal);

	}

	return 0;
}
