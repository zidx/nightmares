
count_binary2.elf:     file format elf32-littlenios2
count_binary2.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000081b8

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x00002b84 memsz 0x00002b84 flags r-x
    LOAD off    0x00003ba4 vaddr 0x0000aba4 paddr 0x0000ae84 align 2**12
         filesz 0x000002e0 memsz 0x000002e0 flags rw-
    LOAD off    0x00004164 vaddr 0x0000b164 paddr 0x0000b164 align 2**12
         filesz 0x00000000 memsz 0x00000124 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000028dc  000081b8  000081b8  000011b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000110  0000aa94  0000aa94  00003a94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000002e0  0000aba4  0000ae84  00003ba4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000124  0000b164  0000b164  00004164  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00003e84  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000630  00000000  00000000  00003ea8  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00009a0f  00000000  00000000  000044d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00002fc3  00000000  00000000  0000dee7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   000036ec  00000000  00000000  00010eaa  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000a3c  00000000  00000000  00014598  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0000198f  00000000  00000000  00014fd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00002198  00000000  00000000  00016963  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000050  00000000  00000000  00018afc  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000288  00000000  00000000  00018b50  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  0001a9c0  2**0
                  CONTENTS, READONLY
 17 .cpu          00000003  00000000  00000000  0001a9c3  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  0001a9c6  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  0001a9c7  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  0001a9c8  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  0001a9cc  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  0001a9d0  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   00000009  00000000  00000000  0001a9d4  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    00000009  00000000  00000000  0001a9dd  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   00000009  00000000  00000000  0001a9e6  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 00000012  00000000  00000000  0001a9ef  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 00000041  00000000  00000000  0001aa01  2**0
                  CONTENTS, READONLY
 28 .jdi          000050da  00000000  00000000  0001aa42  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     0003a2f5  00000000  00000000  0001fb1c  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .exceptions	00000000 .exceptions
000081b8 l    d  .text	00000000 .text
0000aa94 l    d  .rodata	00000000 .rodata
0000aba4 l    d  .rwdata	00000000 .rwdata
0000b164 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../count_binary2_bsp//obj/HAL/src/crt0.o
000081f0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00008094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 count_binary.c
0000b164 l     O .bss	00000001 count
000081f4 l     F .text	00000020 lcd_init
00008214 l     F .text	00000054 initial_message
00008268 l     F .text	00000030 count_led
00008298 l     F .text	0000001c count_sevenseg
000082b4 l     F .text	00000028 count_lcd
000082dc l     F .text	00000050 count_all
0000832c l     F .text	00000138 handle_button_press
00000000 l    df *ABS*	00000000 lib2-divmod.c
00008564 l     F .text	00000074 udivmodsi4
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
0000aba4 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_load.c
00009184 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00009308 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00009448 l     F .text	00000038 alt_dev_reg
0000ac84 l     O .rwdata	0000002c jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0000974c l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
0000999c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00009ad4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00009b00 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00009ee8 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0000a040 l     F .text	00000050 alt_get_errno
0000a090 l     F .text	000000f0 alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 
00008724 g     F .text	0000001c putchar
00009270 g     F .text	00000068 alt_main
00008740 g     F .text	00000080 _puts_r
0000b188 g     O .bss	00000100 alt_irq
0000ae84 g       *ABS*	00000000 __flash_rwdata_start
000086d0 g     F .text	0000004c printf
00000000  w      *UND*	00000000 __errno
00008000 g     F .entry	0000001c __reset
0000b168 g     O .bss	00000004 edge_capture
00008020 g       *ABS*	00000000 __flash_exceptions_start
0000b16c g     O .bss	00000004 errno
0000b174 g     O .bss	00000004 alt_argv
00012e58 g       *ABS*	00000000 _gp
000092d8 g     F .text	00000030 usleep
0000acd8 g     O .rwdata	00000180 alt_fd_list
0000871c g     F .text	00000008 _putchar_r
0000a514 g     F .text	00000090 alt_find_dev
00009fc8 g     F .text	00000078 alt_io_redirect
000087c0 g     F .text	00000014 puts
000095c0 g     F .text	000000f4 altera_avalon_jtag_uart_read
00008694 g     F .text	0000003c _printf_r
00008684 g     F .text	00000008 __udivsi3
0000a78c g     F .text	0000008c alt_icache_flush
0000ae70 g     O .rwdata	00000004 alt_max_fd
0000ae58 g     O .rwdata	00000004 _global_impure_ptr
0000b288 g       *ABS*	00000000 __bss_end
00009df8 g     F .text	000000f0 alt_iic_isr_register
0000a3f0 g     F .text	00000104 alt_tick
00009dac g     F .text	0000004c alt_ic_irq_enabled
0000a358 g     F .text	00000098 alt_alarm_stop
0000b17c g     O .bss	00000004 alt_irq_active
00008000 g       *ABS*	00000000 __alt_mem_onchip_mem
000080ec g     F .exceptions	000000cc alt_irq_handler
0000acb0 g     O .rwdata	00000028 alt_dev_null
00009ab8 g     F .text	0000001c alt_dcache_flush_all
0000ae84 g       *ABS*	00000000 __ram_rwdata_end
0000ae68 g     O .rwdata	00000008 alt_dev_list
00009358 g     F .text	000000f0 write
00009090 g     F .text	00000060 _putc_r
0000aba4 g       *ABS*	00000000 __ram_rodata_end
0000868c g     F .text	00000008 __umodsi3
0000b288 g       *ABS*	00000000 end
0000d000 g       *ABS*	00000000 __alt_stack_pointer
000097c0 g     F .text	00000088 alt_avalon_timer_sc_init
000096b4 g     F .text	00000098 altera_avalon_jtag_uart_write
000087fc g     F .text	00000734 ___vfprintf_internal_r
0000a880 g     F .text	000001d8 __call_exitprocs
000081b8 g     F .text	0000003c _start
0000b180 g     O .bss	00000004 _alt_tick_rate
0000b184 g     O .bss	00000004 _alt_nticks
000094b4 g     F .text	0000004c alt_sys_init
0000915c g     F .text	00000028 __mulsi3
0000aba4 g       *ABS*	00000000 __ram_rwdata_start
0000aa94 g       *ABS*	00000000 __ram_rodata_start
00009500 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0000a6b8 g     F .text	000000d4 alt_get_fd
00009848 g     F .text	00000154 alt_busy_sleep
0000a838 g     F .text	00000048 memcmp
0000b288 g       *ABS*	00000000 __alt_stack_base
0000a5a4 g     F .text	00000114 alt_find_file
00009b50 g     F .text	000000a0 alt_dev_llist_insert
00008f54 g     F .text	000000e0 __sfvwrite_small_dev
0000b164 g       *ABS*	00000000 __bss_start
00008464 g     F .text	00000100 main
0000b178 g     O .bss	00000004 alt_envp
00009560 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000ae74 g     O .rwdata	00000004 alt_errno
00009034 g     F .text	0000005c putc
000085d8 g     F .text	00000050 __divsi3
0000aa94 g       *ABS*	00000000 __flash_rodata_start
00009480 g     F .text	00000034 alt_irq_init
0000a2d8 g     F .text	00000080 alt_release_fd
000090f0 g     F .text	0000006c _write_r
0000ae5c g     O .rwdata	00000004 _impure_ptr
0000b170 g     O .bss	00000004 alt_argc
00008020 g       .exceptions	00000000 alt_irq_entry
0000ae60 g     O .rwdata	00000008 alt_fs_list
00008020 g       *ABS*	00000000 __ram_exceptions_start
00009c20 g     F .text	00000050 alt_ic_isr_register
0000ae84 g       *ABS*	00000000 _edata
0000b288 g       *ABS*	00000000 _end
000081b8 g       *ABS*	00000000 __ram_exceptions_end
00009d0c g     F .text	000000a0 alt_ic_irq_disable
0000a4f4 g     F .text	00000020 altera_nios2_qsys_irq_init
0000a818 g     F .text	00000020 exit
00008628 g     F .text	0000005c __modsi3
0000d000 g       *ABS*	00000000 __alt_data_end
00008020 g     F .exceptions	00000000 alt_exception
0000aa58 g     F .text	0000003c _exit
000087d4 g     F .text	00000028 strlen
0000a180 g     F .text	00000158 open
00009bf0 g     F .text	00000030 alt_icache_flush_all
0000ae78 g     O .rwdata	00000004 alt_priority_mask
00009c70 g     F .text	0000009c alt_ic_irq_enable
00008f30 g     F .text	00000024 __vfprintf_internal
0000ae7c g     O .rwdata	00000008 alt_alarm_list
000099ec g     F .text	000000cc close
000091f0 g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free



Disassembly of section .entry:

00008000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
    8000:	00820014 	movui	r2,2048
#endif

0:
    initi r2
    8004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
    8008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
    800c:	00bffd16 	blt	zero,r2,8004 <_gp+0xffff51ac>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8010:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8014:	08606e14 	ori	at,at,33208
    jmp r1
    8018:	0800683a 	jmp	at
    801c:	00000000 	call	0 <__reset-0x8000>

Disassembly of section .exceptions:

00008020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
    8020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
    8024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
    8028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
    802c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
    8030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
    8034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
    8038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
    803c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
    8040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
    8044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
    8048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
    804c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
    8050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
    8054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
    8058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
    805c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
    8060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
    8064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
    8068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
    806c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    8070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
    8074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
    8078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
    807c:	10000326 	beq	r2,zero,808c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
    8080:	20000226 	beq	r4,zero,808c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
    8084:	00080ec0 	call	80ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
    8088:	00000306 	br	8098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
    808c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
    8090:	e8bfff17 	ldw	r2,-4(ea)

00008094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
    8094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
    8098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
    809c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
    80a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
    80a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
    80a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
    80ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
    80b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
    80b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
    80b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
    80bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
    80c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
    80c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
    80c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
    80cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
    80d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
    80d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
    80d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
    80dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
    80e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
    80e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
    80e8:	ef80083a 	eret

000080ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
    80ec:	defff904 	addi	sp,sp,-28
    80f0:	dfc00615 	stw	ra,24(sp)
    80f4:	df000515 	stw	fp,20(sp)
    80f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
    80fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    8100:	0005313a 	rdctl	r2,ipending
    8104:	e0bffe15 	stw	r2,-8(fp)

  return active;
    8108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
    810c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
    8110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
    8114:	00800044 	movi	r2,1
    8118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
    811c:	e0fffb17 	ldw	r3,-20(fp)
    8120:	e0bffc17 	ldw	r2,-16(fp)
    8124:	1884703a 	and	r2,r3,r2
    8128:	10001726 	beq	r2,zero,8188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
    812c:	00c00074 	movhi	r3,1
    8130:	18ec6204 	addi	r3,r3,-20088
    8134:	e0bffd17 	ldw	r2,-12(fp)
    8138:	100490fa 	slli	r2,r2,3
    813c:	1885883a 	add	r2,r3,r2
    8140:	10c00017 	ldw	r3,0(r2)
    8144:	01000074 	movhi	r4,1
    8148:	212c6204 	addi	r4,r4,-20088
    814c:	e0bffd17 	ldw	r2,-12(fp)
    8150:	100490fa 	slli	r2,r2,3
    8154:	2085883a 	add	r2,r4,r2
    8158:	10800104 	addi	r2,r2,4
    815c:	10800017 	ldw	r2,0(r2)
    8160:	1009883a 	mov	r4,r2
    8164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
    8168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    816c:	0005313a 	rdctl	r2,ipending
    8170:	e0bfff15 	stw	r2,-4(fp)

  return active;
    8174:	e0bfff17 	ldw	r2,-4(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
    8178:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
    817c:	e0bffb17 	ldw	r2,-20(fp)
    8180:	103fe31e 	bne	r2,zero,8110 <_gp+0xffff52b8>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
    8184:	00000706 	br	81a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
    8188:	e0bffc17 	ldw	r2,-16(fp)
    818c:	1085883a 	add	r2,r2,r2
    8190:	e0bffc15 	stw	r2,-16(fp)
      i++;
    8194:	e0bffd17 	ldw	r2,-12(fp)
    8198:	10800044 	addi	r2,r2,1
    819c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
    81a0:	003fde06 	br	811c <_gp+0xffff52c4>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
    81a4:	e037883a 	mov	sp,fp
    81a8:	dfc00117 	ldw	ra,4(sp)
    81ac:	df000017 	ldw	fp,0(sp)
    81b0:	dec00204 	addi	sp,sp,8
    81b4:	f800283a 	ret

Disassembly of section .text:

000081b8 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    81b8:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    81bc:	def40014 	ori	sp,sp,53248
    movhi gp, %hi(_gp)
    81c0:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    81c4:	d68b9614 	ori	gp,gp,11864
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    81c8:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    81cc:	10ac5914 	ori	r2,r2,45412

    movhi r3, %hi(__bss_end)
    81d0:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    81d4:	18eca214 	ori	r3,r3,45704

    beq r2, r3, 1f
    81d8:	10c00326 	beq	r2,r3,81e8 <_start+0x30>

0:
    stw zero, (r2)
    81dc:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    81e0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    81e4:	10fffd36 	bltu	r2,r3,81dc <_gp+0xffff5384>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    81e8:	00091f00 	call	91f0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    81ec:	00092700 	call	9270 <alt_main>

000081f0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    81f0:	003fff06 	br	81f0 <_gp+0xffff5398>

000081f4 <lcd_init>:
 * count_<device>() -- Implements the counting on the respective device.
 * handle_button_press() -- Determines what to do when one of the buttons
 * is pressed.
 */
static void lcd_init( FILE *lcd )
{
    81f4:	defffe04 	addi	sp,sp,-8
    81f8:	df000115 	stw	fp,4(sp)
    81fc:	df000104 	addi	fp,sp,4
    8200:	e13fff15 	stw	r4,-4(fp)
    /* If the LCD Display exists, write a simple message on the first line. */
    LCD_PRINTF(lcd, "%c%s Counting will be displayed below...", ESC,
               ESC_TOP_LEFT);
}
    8204:	e037883a 	mov	sp,fp
    8208:	df000017 	ldw	fp,0(sp)
    820c:	dec00104 	addi	sp,sp,4
    8210:	f800283a 	ret

00008214 <initial_message>:

static void initial_message()
{
    8214:	defffe04 	addi	sp,sp,-8
    8218:	dfc00115 	stw	ra,4(sp)
    821c:	df000015 	stw	fp,0(sp)
    8220:	d839883a 	mov	fp,sp
    printf("\n\n**************************\n");
    8224:	01000074 	movhi	r4,1
    8228:	212aa504 	addi	r4,r4,-21868
    822c:	00087c00 	call	87c0 <puts>
    printf("* Hello from Nios II!    *\n");
    8230:	01000074 	movhi	r4,1
    8234:	212aad04 	addi	r4,r4,-21836
    8238:	00087c00 	call	87c0 <puts>
    printf("* Counting from 00 to ff *\n");
    823c:	01000074 	movhi	r4,1
    8240:	212ab404 	addi	r4,r4,-21808
    8244:	00087c00 	call	87c0 <puts>
    printf("**************************\n");
    8248:	01000074 	movhi	r4,1
    824c:	212abb04 	addi	r4,r4,-21780
    8250:	00087c00 	call	87c0 <puts>
}
    8254:	e037883a 	mov	sp,fp
    8258:	dfc00117 	ldw	ra,4(sp)
    825c:	df000017 	ldw	fp,0(sp)
    8260:	dec00204 	addi	sp,sp,8
    8264:	f800283a 	ret

00008268 <count_led>:
 * Illuminate LEDs with the value of 'count', if they
 * exist in the system
 */

static void count_led()
{
    8268:	deffff04 	addi	sp,sp,-4
    826c:	df000015 	stw	fp,0(sp)
    8270:	d839883a 	mov	fp,sp
#ifdef LED_PIO_BASE
    IOWR_ALTERA_AVALON_PIO_DATA(
    8274:	d0a0c303 	ldbu	r2,-31988(gp)
    8278:	10c03fcc 	andi	r3,r2,255
    827c:	00800074 	movhi	r2,1
    8280:	10840804 	addi	r2,r2,4128
    8284:	10c00035 	stwio	r3,0(r2)
        LED_PIO_BASE,
        count
        );
#endif
}
    8288:	e037883a 	mov	sp,fp
    828c:	df000017 	ldw	fp,0(sp)
    8290:	dec00104 	addi	sp,sp,4
    8294:	f800283a 	ret

00008298 <count_sevenseg>:
 * 
 * Display value of 'count' on the Seven Segment Display
 */

static void count_sevenseg()
{
    8298:	deffff04 	addi	sp,sp,-4
    829c:	df000015 	stw	fp,0(sp)
    82a0:	d839883a 	mov	fp,sp
#ifdef SEVEN_SEG_PIO_BASE
    sevenseg_set_hex(count);
#endif
}
    82a4:	e037883a 	mov	sp,fp
    82a8:	df000017 	ldw	fp,0(sp)
    82ac:	dec00104 	addi	sp,sp,4
    82b0:	f800283a 	ret

000082b4 <count_lcd>:
 * is treated as an I/O device (i.e.: using fprintf).  You
 * can read more about HAL drivers <link/reference here>.
 */

static void count_lcd( void* arg )
{
    82b4:	defffd04 	addi	sp,sp,-12
    82b8:	df000215 	stw	fp,8(sp)
    82bc:	df000204 	addi	fp,sp,8
    82c0:	e13fff15 	stw	r4,-4(fp)
    FILE* __attribute__ ((unused))  lcd;  /* Attribute suppresses "unused variable" warning. */
    lcd = (FILE*) arg;
    82c4:	e0bfff17 	ldw	r2,-4(fp)
    82c8:	e0bffe15 	stw	r2,-8(fp)
    LCD_PRINTF(lcd, "%c%s 0x%x\n", ESC, ESC_COL2_INDENT5, count);
}
    82cc:	e037883a 	mov	sp,fp
    82d0:	df000017 	ldw	fp,0(sp)
    82d4:	dec00104 	addi	sp,sp,4
    82d8:	f800283a 	ret

000082dc <count_all>:

/* count_all merely combines all three peripherals counting */

static void count_all( void* arg )
{
    82dc:	defffd04 	addi	sp,sp,-12
    82e0:	dfc00215 	stw	ra,8(sp)
    82e4:	df000115 	stw	fp,4(sp)
    82e8:	df000104 	addi	fp,sp,4
    82ec:	e13fff15 	stw	r4,-4(fp)
    count_led();
    82f0:	00082680 	call	8268 <count_led>
    count_sevenseg();
    82f4:	00082980 	call	8298 <count_sevenseg>
    count_lcd( arg );
    82f8:	e13fff17 	ldw	r4,-4(fp)
    82fc:	00082b40 	call	82b4 <count_lcd>
    printf("%02x,  ", count);
    8300:	d0a0c303 	ldbu	r2,-31988(gp)
    8304:	10803fcc 	andi	r2,r2,255
    8308:	01000074 	movhi	r4,1
    830c:	212ac204 	addi	r4,r4,-21752
    8310:	100b883a 	mov	r5,r2
    8314:	00086d00 	call	86d0 <printf>
}
    8318:	e037883a 	mov	sp,fp
    831c:	dfc00117 	ldw	ra,4(sp)
    8320:	df000017 	ldw	fp,0(sp)
    8324:	dec00204 	addi	sp,sp,8
    8328:	f800283a 	ret

0000832c <handle_button_press>:
  

static void handle_button_press(alt_u8 type, FILE *lcd)
{
    832c:	defffc04 	addi	sp,sp,-16
    8330:	dfc00315 	stw	ra,12(sp)
    8334:	df000215 	stw	fp,8(sp)
    8338:	df000204 	addi	fp,sp,8
    833c:	2005883a 	mov	r2,r4
    8340:	e17fff15 	stw	r5,-4(fp)
    8344:	e0bffe05 	stb	r2,-8(fp)
    /* Button press actions while counting. */
    if (type == 'c')
    8348:	e0bffe03 	ldbu	r2,-8(fp)
    834c:	108018d8 	cmpnei	r2,r2,99
    8350:	10001b1e 	bne	r2,zero,83c0 <handle_button_press+0x94>
    {
        switch (edge_capture) 
    8354:	d0a0c417 	ldw	r2,-31984(gp)
    8358:	10c000a0 	cmpeqi	r3,r2,2
    835c:	18000c1e 	bne	r3,zero,8390 <handle_button_press+0x64>
    8360:	10c000c8 	cmpgei	r3,r2,3
    8364:	1800031e 	bne	r3,zero,8374 <handle_button_press+0x48>
    8368:	10800060 	cmpeqi	r2,r2,1
    836c:	1000061e 	bne	r2,zero,8388 <handle_button_press+0x5c>
    8370:	00001006 	br	83b4 <handle_button_press+0x88>
    8374:	10c00120 	cmpeqi	r3,r2,4
    8378:	1800071e 	bne	r3,zero,8398 <handle_button_press+0x6c>
    837c:	10800220 	cmpeqi	r2,r2,8
    8380:	1000081e 	bne	r2,zero,83a4 <handle_button_press+0x78>
    8384:	00000b06 	br	83b4 <handle_button_press+0x88>
        {
            /* Button 1:  Output counting to LED only. */
        case 0x1:
            count_led();
    8388:	00082680 	call	8268 <count_led>
            break;
    838c:	00003006 	br	8450 <handle_button_press+0x124>
            /* Button 2:  Output counting to SEVEN SEG only. */
        case 0x2:
            count_sevenseg();
    8390:	00082980 	call	8298 <count_sevenseg>
            break;
    8394:	00002e06 	br	8450 <handle_button_press+0x124>
            /* Button 3:  Output counting to D only. */
        case 0x4:
            count_lcd( lcd );
    8398:	e13fff17 	ldw	r4,-4(fp)
    839c:	00082b40 	call	82b4 <count_lcd>
            break;
    83a0:	00002b06 	br	8450 <handle_button_press+0x124>
            /* Button 4:  Output counting to LED, SEVEN_SEG, and D. */ 
        case 0x8:
            count_all( lcd );
    83a4:	e13fff17 	ldw	r4,-4(fp)
    83a8:	00082dc0 	call	82dc <count_all>
            break;
    83ac:	0001883a 	nop
    83b0:	00002706 	br	8450 <handle_button_press+0x124>
            /* If value ends up being something different (shouldn't) do
               same as 8. */
        default:
            count_all( lcd );
    83b4:	e13fff17 	ldw	r4,-4(fp)
    83b8:	00082dc0 	call	82dc <count_all>
            break;
    83bc:	00002406 	br	8450 <handle_button_press+0x124>
        }
    }
    /* If 'type' is anything else, assume we're "waiting"...*/
    else
    {
        switch (edge_capture)
    83c0:	d0a0c417 	ldw	r2,-31984(gp)
    83c4:	10c000a0 	cmpeqi	r3,r2,2
    83c8:	18000f1e 	bne	r3,zero,8408 <handle_button_press+0xdc>
    83cc:	10c000c8 	cmpgei	r3,r2,3
    83d0:	1800031e 	bne	r3,zero,83e0 <handle_button_press+0xb4>
    83d4:	10800060 	cmpeqi	r2,r2,1
    83d8:	1000061e 	bne	r2,zero,83f4 <handle_button_press+0xc8>
    83dc:	00001906 	br	8444 <handle_button_press+0x118>
    83e0:	10c00120 	cmpeqi	r3,r2,4
    83e4:	18000d1e 	bne	r3,zero,841c <handle_button_press+0xf0>
    83e8:	10800220 	cmpeqi	r2,r2,8
    83ec:	1000101e 	bne	r2,zero,8430 <handle_button_press+0x104>
    83f0:	00001406 	br	8444 <handle_button_press+0x118>
        {
        case 0x1:
            printf( "Button 1\n");
    83f4:	01000074 	movhi	r4,1
    83f8:	212ac404 	addi	r4,r4,-21744
    83fc:	00087c00 	call	87c0 <puts>
            edge_capture = 0;
    8400:	d020c415 	stw	zero,-31984(gp)
            break;
    8404:	00001206 	br	8450 <handle_button_press+0x124>
        case 0x2:
            printf( "Button 2\n");
    8408:	01000074 	movhi	r4,1
    840c:	212ac704 	addi	r4,r4,-21732
    8410:	00087c00 	call	87c0 <puts>
            edge_capture = 0;
    8414:	d020c415 	stw	zero,-31984(gp)
            break;
    8418:	00000d06 	br	8450 <handle_button_press+0x124>
        case 0x4:
            printf( "Button 3\n");
    841c:	01000074 	movhi	r4,1
    8420:	212aca04 	addi	r4,r4,-21720
    8424:	00087c00 	call	87c0 <puts>
            edge_capture = 0;
    8428:	d020c415 	stw	zero,-31984(gp)
            break;
    842c:	00000806 	br	8450 <handle_button_press+0x124>
        case 0x8:
            printf( "Button 4\n");
    8430:	01000074 	movhi	r4,1
    8434:	212acd04 	addi	r4,r4,-21708
    8438:	00087c00 	call	87c0 <puts>
            edge_capture = 0;
    843c:	d020c415 	stw	zero,-31984(gp)
            break;
    8440:	00000306 	br	8450 <handle_button_press+0x124>
        default:
            printf( "Button press UNKNOWN!!\n");
    8444:	01000074 	movhi	r4,1
    8448:	212ad004 	addi	r4,r4,-21696
    844c:	00087c00 	call	87c0 <puts>
        }
    }
}
    8450:	e037883a 	mov	sp,fp
    8454:	dfc00117 	ldw	ra,4(sp)
    8458:	df000017 	ldw	fp,0(sp)
    845c:	dec00204 	addi	sp,sp,8
    8460:	f800283a 	ret

00008464 <main>:
 * NOTE:  References to Buttons 1-4 correspond to SW0-SW3 on the Development   *
 * Board.                                                                      *
 ******************************************************************************/

int main(void)
{ 
    8464:	defffb04 	addi	sp,sp,-20
    8468:	dfc00415 	stw	ra,16(sp)
    846c:	df000315 	stw	fp,12(sp)
    8470:	df000304 	addi	fp,sp,12
    int i;
    int  __attribute__ ((unused))  wait_time;  /* Attribute suppresses "var set but not used" warning. */
    FILE * lcd;

    count = 0;
    8474:	d020c305 	stb	zero,-31988(gp)

    /* Initialize the LCD, if there is one.
     */
    lcd = LCD_OPEN();
    8478:	e03ffe15 	stw	zero,-8(fp)
    if(lcd != NULL) {lcd_init( lcd );}
    847c:	e0bffe17 	ldw	r2,-8(fp)
    8480:	10000226 	beq	r2,zero,848c <main+0x28>
    8484:	e13ffe17 	ldw	r4,-8(fp)
    8488:	00081f40 	call	81f4 <lcd_init>
    init_button_pio();
#endif

/* Initial message to output. */

    initial_message();
    848c:	00082140 	call	8214 <initial_message>

/* Continue 0-ff counting loop. */

    while( 1 ) 
    {
        usleep(100000);
    8490:	010000b4 	movhi	r4,2
    8494:	2121a804 	addi	r4,r4,-31072
    8498:	00092d80 	call	92d8 <usleep>
        if (edge_capture != 0)
    849c:	d0a0c417 	ldw	r2,-31984(gp)
    84a0:	10000426 	beq	r2,zero,84b4 <main+0x50>
        {
            /* Handle button presses while counting... */
            handle_button_press('c', lcd);
    84a4:	010018c4 	movi	r4,99
    84a8:	e17ffe17 	ldw	r5,-8(fp)
    84ac:	000832c0 	call	832c <handle_button_press>
    84b0:	00000206 	br	84bc <main+0x58>
        }
        /* If no button presses, try to output counting to all. */
        else
        {
            count_all( lcd );
    84b4:	e13ffe17 	ldw	r4,-8(fp)
    84b8:	00082dc0 	call	82dc <count_all>
        }
        /*
         * If done counting, wait about 7 seconds...
         * detect button presses while waiting.
         */
        if( count == 0xff )
    84bc:	d0a0c303 	ldbu	r2,-31988(gp)
    84c0:	10803fcc 	andi	r2,r2,255
    84c4:	10803fd8 	cmpnei	r2,r2,255
    84c8:	1000221e 	bne	r2,zero,8554 <main+0xf0>
        {
            LCD_PRINTF(lcd, "%c%s %c%s %c%s Waiting...\n", ESC, ESC_TOP_LEFT,
                       ESC, ESC_CLEAR, ESC, ESC_COL1_INDENT5);
            printf("\nWaiting...");
    84cc:	01000074 	movhi	r4,1
    84d0:	212ad604 	addi	r4,r4,-21672
    84d4:	00086d00 	call	86d0 <printf>
            edge_capture = 0; /* Reset to 0 during wait/pause period. */
    84d8:	d020c415 	stw	zero,-31984(gp)

            /* Clear the 2nd. line of the LCD screen. */
            LCD_PRINTF(lcd, "%c%s, %c%s", ESC, ESC_COL2_INDENT5, ESC,
                       ESC_CLEAR);
            wait_time = 0;
    84dc:	e03fff15 	stw	zero,-4(fp)
            for (i = 0; i<70; ++i)
    84e0:	e03ffd15 	stw	zero,-12(fp)
    84e4:	00001506 	br	853c <main+0xd8>
            {
                printf(".");
    84e8:	01000b84 	movi	r4,46
    84ec:	00087240 	call	8724 <putchar>
                wait_time = i/10;
    84f0:	e0bffd17 	ldw	r2,-12(fp)
    84f4:	1009883a 	mov	r4,r2
    84f8:	01400284 	movi	r5,10
    84fc:	00085d80 	call	85d8 <__divsi3>
    8500:	e0bfff15 	stw	r2,-4(fp)
                LCD_PRINTF(lcd, "%c%s %ds\n", ESC, ESC_COL2_INDENT5,
                    wait_time+1);

                if (edge_capture != 0) 
    8504:	d0a0c417 	ldw	r2,-31984(gp)
    8508:	10000626 	beq	r2,zero,8524 <main+0xc0>
                {
                    printf( "\nYou pushed:  " );
    850c:	01000074 	movhi	r4,1
    8510:	212ad904 	addi	r4,r4,-21660
    8514:	00086d00 	call	86d0 <printf>
                    handle_button_press('w', lcd);
    8518:	01001dc4 	movi	r4,119
    851c:	e17ffe17 	ldw	r5,-8(fp)
    8520:	000832c0 	call	832c <handle_button_press>
                }
                usleep(100000); /* Sleep for 0.1s. */
    8524:	010000b4 	movhi	r4,2
    8528:	2121a804 	addi	r4,r4,-31072
    852c:	00092d80 	call	92d8 <usleep>

            /* Clear the 2nd. line of the LCD screen. */
            LCD_PRINTF(lcd, "%c%s, %c%s", ESC, ESC_COL2_INDENT5, ESC,
                       ESC_CLEAR);
            wait_time = 0;
            for (i = 0; i<70; ++i)
    8530:	e0bffd17 	ldw	r2,-12(fp)
    8534:	10800044 	addi	r2,r2,1
    8538:	e0bffd15 	stw	r2,-12(fp)
    853c:	e0bffd17 	ldw	r2,-12(fp)
    8540:	10801190 	cmplti	r2,r2,70
    8544:	103fe81e 	bne	r2,zero,84e8 <_gp+0xffff5690>
                }
                usleep(100000); /* Sleep for 0.1s. */
            }
            /*  Output the "loop start" messages before looping, again.
             */
            initial_message();
    8548:	00082140 	call	8214 <initial_message>
            lcd_init( lcd );
    854c:	e13ffe17 	ldw	r4,-8(fp)
    8550:	00081f40 	call	81f4 <lcd_init>
        }
        count++;
    8554:	d0a0c303 	ldbu	r2,-31988(gp)
    8558:	10800044 	addi	r2,r2,1
    855c:	d0a0c305 	stb	r2,-31988(gp)
    }
    8560:	003fcb06 	br	8490 <_gp+0xffff5638>

00008564 <udivmodsi4>:
    8564:	2005883a 	mov	r2,r4
    8568:	2900182e 	bgeu	r5,r4,85cc <udivmodsi4+0x68>
    856c:	28001716 	blt	r5,zero,85cc <udivmodsi4+0x68>
    8570:	01000804 	movi	r4,32
    8574:	00c00044 	movi	r3,1
    8578:	00000206 	br	8584 <udivmodsi4+0x20>
    857c:	20001126 	beq	r4,zero,85c4 <udivmodsi4+0x60>
    8580:	28000516 	blt	r5,zero,8598 <udivmodsi4+0x34>
    8584:	294b883a 	add	r5,r5,r5
    8588:	213fffc4 	addi	r4,r4,-1
    858c:	18c7883a 	add	r3,r3,r3
    8590:	28bffa36 	bltu	r5,r2,857c <_gp+0xffff5724>
    8594:	18000b26 	beq	r3,zero,85c4 <udivmodsi4+0x60>
    8598:	0009883a 	mov	r4,zero
    859c:	11400236 	bltu	r2,r5,85a8 <udivmodsi4+0x44>
    85a0:	1145c83a 	sub	r2,r2,r5
    85a4:	20c8b03a 	or	r4,r4,r3
    85a8:	1806d07a 	srli	r3,r3,1
    85ac:	280ad07a 	srli	r5,r5,1
    85b0:	183ffa1e 	bne	r3,zero,859c <_gp+0xffff5744>
    85b4:	3000021e 	bne	r6,zero,85c0 <udivmodsi4+0x5c>
    85b8:	2005883a 	mov	r2,r4
    85bc:	f800283a 	ret
    85c0:	f800283a 	ret
    85c4:	0009883a 	mov	r4,zero
    85c8:	003ffa06 	br	85b4 <_gp+0xffff575c>
    85cc:	00c00044 	movi	r3,1
    85d0:	0009883a 	mov	r4,zero
    85d4:	003ff106 	br	859c <_gp+0xffff5744>

000085d8 <__divsi3>:
    85d8:	defffe04 	addi	sp,sp,-8
    85dc:	dfc00115 	stw	ra,4(sp)
    85e0:	dc000015 	stw	r16,0(sp)
    85e4:	20000a16 	blt	r4,zero,8610 <__divsi3+0x38>
    85e8:	0021883a 	mov	r16,zero
    85ec:	28000b16 	blt	r5,zero,861c <__divsi3+0x44>
    85f0:	000d883a 	mov	r6,zero
    85f4:	00085640 	call	8564 <udivmodsi4>
    85f8:	80000126 	beq	r16,zero,8600 <__divsi3+0x28>
    85fc:	0085c83a 	sub	r2,zero,r2
    8600:	dfc00117 	ldw	ra,4(sp)
    8604:	dc000017 	ldw	r16,0(sp)
    8608:	dec00204 	addi	sp,sp,8
    860c:	f800283a 	ret
    8610:	0109c83a 	sub	r4,zero,r4
    8614:	04000044 	movi	r16,1
    8618:	283ff50e 	bge	r5,zero,85f0 <_gp+0xffff5798>
    861c:	014bc83a 	sub	r5,zero,r5
    8620:	8400005c 	xori	r16,r16,1
    8624:	003ff206 	br	85f0 <_gp+0xffff5798>

00008628 <__modsi3>:
    8628:	deffff04 	addi	sp,sp,-4
    862c:	dfc00015 	stw	ra,0(sp)
    8630:	20000516 	blt	r4,zero,8648 <__modsi3+0x20>
    8634:	28000c16 	blt	r5,zero,8668 <__modsi3+0x40>
    8638:	01800044 	movi	r6,1
    863c:	dfc00017 	ldw	ra,0(sp)
    8640:	dec00104 	addi	sp,sp,4
    8644:	00085641 	jmpi	8564 <udivmodsi4>
    8648:	0109c83a 	sub	r4,zero,r4
    864c:	28000b16 	blt	r5,zero,867c <__modsi3+0x54>
    8650:	01800044 	movi	r6,1
    8654:	00085640 	call	8564 <udivmodsi4>
    8658:	0085c83a 	sub	r2,zero,r2
    865c:	dfc00017 	ldw	ra,0(sp)
    8660:	dec00104 	addi	sp,sp,4
    8664:	f800283a 	ret
    8668:	014bc83a 	sub	r5,zero,r5
    866c:	01800044 	movi	r6,1
    8670:	dfc00017 	ldw	ra,0(sp)
    8674:	dec00104 	addi	sp,sp,4
    8678:	00085641 	jmpi	8564 <udivmodsi4>
    867c:	014bc83a 	sub	r5,zero,r5
    8680:	003ff306 	br	8650 <_gp+0xffff57f8>

00008684 <__udivsi3>:
    8684:	000d883a 	mov	r6,zero
    8688:	00085641 	jmpi	8564 <udivmodsi4>

0000868c <__umodsi3>:
    868c:	01800044 	movi	r6,1
    8690:	00085641 	jmpi	8564 <udivmodsi4>

00008694 <_printf_r>:
    8694:	defffd04 	addi	sp,sp,-12
    8698:	dfc00015 	stw	ra,0(sp)
    869c:	d9800115 	stw	r6,4(sp)
    86a0:	d9c00215 	stw	r7,8(sp)
    86a4:	20800217 	ldw	r2,8(r4)
    86a8:	00c00074 	movhi	r3,1
    86ac:	18e3d504 	addi	r3,r3,-28844
    86b0:	280d883a 	mov	r6,r5
    86b4:	10c00115 	stw	r3,4(r2)
    86b8:	100b883a 	mov	r5,r2
    86bc:	d9c00104 	addi	r7,sp,4
    86c0:	00087fc0 	call	87fc <___vfprintf_internal_r>
    86c4:	dfc00017 	ldw	ra,0(sp)
    86c8:	dec00304 	addi	sp,sp,12
    86cc:	f800283a 	ret

000086d0 <printf>:
    86d0:	defffc04 	addi	sp,sp,-16
    86d4:	dfc00015 	stw	ra,0(sp)
    86d8:	d9400115 	stw	r5,4(sp)
    86dc:	d9800215 	stw	r6,8(sp)
    86e0:	d9c00315 	stw	r7,12(sp)
    86e4:	00800074 	movhi	r2,1
    86e8:	10ab9704 	addi	r2,r2,-20900
    86ec:	10800017 	ldw	r2,0(r2)
    86f0:	00c00074 	movhi	r3,1
    86f4:	18e3d504 	addi	r3,r3,-28844
    86f8:	200b883a 	mov	r5,r4
    86fc:	10800217 	ldw	r2,8(r2)
    8700:	d9800104 	addi	r6,sp,4
    8704:	10c00115 	stw	r3,4(r2)
    8708:	1009883a 	mov	r4,r2
    870c:	0008f300 	call	8f30 <__vfprintf_internal>
    8710:	dfc00017 	ldw	ra,0(sp)
    8714:	dec00404 	addi	sp,sp,16
    8718:	f800283a 	ret

0000871c <_putchar_r>:
    871c:	21800217 	ldw	r6,8(r4)
    8720:	00090901 	jmpi	9090 <_putc_r>

00008724 <putchar>:
    8724:	00800074 	movhi	r2,1
    8728:	10ab9704 	addi	r2,r2,-20900
    872c:	10800017 	ldw	r2,0(r2)
    8730:	200b883a 	mov	r5,r4
    8734:	11800217 	ldw	r6,8(r2)
    8738:	1009883a 	mov	r4,r2
    873c:	00090901 	jmpi	9090 <_putc_r>

00008740 <_puts_r>:
    8740:	defffd04 	addi	sp,sp,-12
    8744:	dc000015 	stw	r16,0(sp)
    8748:	2021883a 	mov	r16,r4
    874c:	2809883a 	mov	r4,r5
    8750:	dfc00215 	stw	ra,8(sp)
    8754:	dc400115 	stw	r17,4(sp)
    8758:	2823883a 	mov	r17,r5
    875c:	00087d40 	call	87d4 <strlen>
    8760:	81400217 	ldw	r5,8(r16)
    8764:	00c00074 	movhi	r3,1
    8768:	18e3d504 	addi	r3,r3,-28844
    876c:	880d883a 	mov	r6,r17
    8770:	8009883a 	mov	r4,r16
    8774:	28c00115 	stw	r3,4(r5)
    8778:	100f883a 	mov	r7,r2
    877c:	183ee83a 	callr	r3
    8780:	047fffc4 	movi	r17,-1
    8784:	14400926 	beq	r2,r17,87ac <_puts_r+0x6c>
    8788:	81400217 	ldw	r5,8(r16)
    878c:	8009883a 	mov	r4,r16
    8790:	01800074 	movhi	r6,1
    8794:	31aadd04 	addi	r6,r6,-21644
    8798:	28800117 	ldw	r2,4(r5)
    879c:	01c00044 	movi	r7,1
    87a0:	103ee83a 	callr	r2
    87a4:	14400126 	beq	r2,r17,87ac <_puts_r+0x6c>
    87a8:	0005883a 	mov	r2,zero
    87ac:	dfc00217 	ldw	ra,8(sp)
    87b0:	dc400117 	ldw	r17,4(sp)
    87b4:	dc000017 	ldw	r16,0(sp)
    87b8:	dec00304 	addi	sp,sp,12
    87bc:	f800283a 	ret

000087c0 <puts>:
    87c0:	00800074 	movhi	r2,1
    87c4:	10ab9704 	addi	r2,r2,-20900
    87c8:	200b883a 	mov	r5,r4
    87cc:	11000017 	ldw	r4,0(r2)
    87d0:	00087401 	jmpi	8740 <_puts_r>

000087d4 <strlen>:
    87d4:	20800007 	ldb	r2,0(r4)
    87d8:	10000626 	beq	r2,zero,87f4 <strlen+0x20>
    87dc:	2005883a 	mov	r2,r4
    87e0:	10800044 	addi	r2,r2,1
    87e4:	10c00007 	ldb	r3,0(r2)
    87e8:	183ffd1e 	bne	r3,zero,87e0 <_gp+0xffff5988>
    87ec:	1105c83a 	sub	r2,r2,r4
    87f0:	f800283a 	ret
    87f4:	0005883a 	mov	r2,zero
    87f8:	f800283a 	ret

000087fc <___vfprintf_internal_r>:
    87fc:	deffe004 	addi	sp,sp,-128
    8800:	d8c00804 	addi	r3,sp,32
    8804:	ddc01d15 	stw	r23,116(sp)
    8808:	dd401b15 	stw	r21,108(sp)
    880c:	dd001a15 	stw	r20,104(sp)
    8810:	dcc01915 	stw	r19,100(sp)
    8814:	dc801815 	stw	r18,96(sp)
    8818:	dc001615 	stw	r16,88(sp)
    881c:	dfc01f15 	stw	ra,124(sp)
    8820:	df001e15 	stw	fp,120(sp)
    8824:	dd801c15 	stw	r22,112(sp)
    8828:	dc401715 	stw	r17,92(sp)
    882c:	d9000f15 	stw	r4,60(sp)
    8830:	d9c00e15 	stw	r7,56(sp)
    8834:	3021883a 	mov	r16,r6
    8838:	0025883a 	mov	r18,zero
    883c:	d8001415 	stw	zero,80(sp)
    8840:	d8000d15 	stw	zero,52(sp)
    8844:	0029883a 	mov	r20,zero
    8848:	d8000b15 	stw	zero,44(sp)
    884c:	d8000c15 	stw	zero,48(sp)
    8850:	d8001315 	stw	zero,76(sp)
    8854:	d8001015 	stw	zero,64(sp)
    8858:	002b883a 	mov	r21,zero
    885c:	04c00044 	movi	r19,1
    8860:	d8c00a15 	stw	r3,40(sp)
    8864:	282f883a 	mov	r23,r5
    8868:	80c00003 	ldbu	r3,0(r16)
    886c:	84000044 	addi	r16,r16,1
    8870:	18803fcc 	andi	r2,r3,255
    8874:	1080201c 	xori	r2,r2,128
    8878:	10bfe004 	addi	r2,r2,-128
    887c:	10001426 	beq	r2,zero,88d0 <___vfprintf_internal_r+0xd4>
    8880:	acc03026 	beq	r21,r19,8944 <___vfprintf_internal_r+0x148>
    8884:	9d401f16 	blt	r19,r21,8904 <___vfprintf_internal_r+0x108>
    8888:	a83ff71e 	bne	r21,zero,8868 <_gp+0xffff5a10>
    888c:	01000944 	movi	r4,37
    8890:	1100d926 	beq	r2,r4,8bf8 <___vfprintf_internal_r+0x3fc>
    8894:	b8800117 	ldw	r2,4(r23)
    8898:	d9000f17 	ldw	r4,60(sp)
    889c:	d8c00905 	stb	r3,36(sp)
    88a0:	b80b883a 	mov	r5,r23
    88a4:	d9800904 	addi	r6,sp,36
    88a8:	01c00044 	movi	r7,1
    88ac:	103ee83a 	callr	r2
    88b0:	1000a31e 	bne	r2,zero,8b40 <___vfprintf_internal_r+0x344>
    88b4:	80c00003 	ldbu	r3,0(r16)
    88b8:	94800044 	addi	r18,r18,1
    88bc:	84000044 	addi	r16,r16,1
    88c0:	18803fcc 	andi	r2,r3,255
    88c4:	1080201c 	xori	r2,r2,128
    88c8:	10bfe004 	addi	r2,r2,-128
    88cc:	103fec1e 	bne	r2,zero,8880 <_gp+0xffff5a28>
    88d0:	9005883a 	mov	r2,r18
    88d4:	dfc01f17 	ldw	ra,124(sp)
    88d8:	df001e17 	ldw	fp,120(sp)
    88dc:	ddc01d17 	ldw	r23,116(sp)
    88e0:	dd801c17 	ldw	r22,112(sp)
    88e4:	dd401b17 	ldw	r21,108(sp)
    88e8:	dd001a17 	ldw	r20,104(sp)
    88ec:	dcc01917 	ldw	r19,100(sp)
    88f0:	dc801817 	ldw	r18,96(sp)
    88f4:	dc401717 	ldw	r17,92(sp)
    88f8:	dc001617 	ldw	r16,88(sp)
    88fc:	dec02004 	addi	sp,sp,128
    8900:	f800283a 	ret
    8904:	01000084 	movi	r4,2
    8908:	a9001226 	beq	r21,r4,8954 <___vfprintf_internal_r+0x158>
    890c:	010000c4 	movi	r4,3
    8910:	a93fd51e 	bne	r21,r4,8868 <_gp+0xffff5a10>
    8914:	1c7ff404 	addi	r17,r3,-48
    8918:	8c403fcc 	andi	r17,r17,255
    891c:	01000244 	movi	r4,9
    8920:	24401b36 	bltu	r4,r17,8990 <___vfprintf_internal_r+0x194>
    8924:	d9000b17 	ldw	r4,44(sp)
    8928:	00bfffc4 	movi	r2,-1
    892c:	2080ea26 	beq	r4,r2,8cd8 <___vfprintf_internal_r+0x4dc>
    8930:	01400284 	movi	r5,10
    8934:	000915c0 	call	915c <__mulsi3>
    8938:	88a3883a 	add	r17,r17,r2
    893c:	dc400b15 	stw	r17,44(sp)
    8940:	003fc906 	br	8868 <_gp+0xffff5a10>
    8944:	01000c04 	movi	r4,48
    8948:	1100de26 	beq	r2,r4,8cc4 <___vfprintf_internal_r+0x4c8>
    894c:	01000944 	movi	r4,37
    8950:	1100fd26 	beq	r2,r4,8d48 <___vfprintf_internal_r+0x54c>
    8954:	1c7ff404 	addi	r17,r3,-48
    8958:	8c403fcc 	andi	r17,r17,255
    895c:	01000244 	movi	r4,9
    8960:	24400936 	bltu	r4,r17,8988 <___vfprintf_internal_r+0x18c>
    8964:	d9000c17 	ldw	r4,48(sp)
    8968:	00bfffc4 	movi	r2,-1
    896c:	2080d826 	beq	r4,r2,8cd0 <___vfprintf_internal_r+0x4d4>
    8970:	01400284 	movi	r5,10
    8974:	000915c0 	call	915c <__mulsi3>
    8978:	88a3883a 	add	r17,r17,r2
    897c:	dc400c15 	stw	r17,48(sp)
    8980:	05400084 	movi	r21,2
    8984:	003fb806 	br	8868 <_gp+0xffff5a10>
    8988:	01000b84 	movi	r4,46
    898c:	1100a726 	beq	r2,r4,8c2c <___vfprintf_internal_r+0x430>
    8990:	01401b04 	movi	r5,108
    8994:	1140a326 	beq	r2,r5,8c24 <___vfprintf_internal_r+0x428>
    8998:	d9000b17 	ldw	r4,44(sp)
    899c:	00bfffc4 	movi	r2,-1
    89a0:	2080e626 	beq	r4,r2,8d3c <___vfprintf_internal_r+0x540>
    89a4:	d8001015 	stw	zero,64(sp)
    89a8:	18ffea04 	addi	r3,r3,-88
    89ac:	18c03fcc 	andi	r3,r3,255
    89b0:	00800804 	movi	r2,32
    89b4:	10c0022e 	bgeu	r2,r3,89c0 <___vfprintf_internal_r+0x1c4>
    89b8:	002b883a 	mov	r21,zero
    89bc:	003faa06 	br	8868 <_gp+0xffff5a10>
    89c0:	18c7883a 	add	r3,r3,r3
    89c4:	18c7883a 	add	r3,r3,r3
    89c8:	01400074 	movhi	r5,1
    89cc:	29627704 	addi	r5,r5,-30244
    89d0:	1947883a 	add	r3,r3,r5
    89d4:	18800017 	ldw	r2,0(r3)
    89d8:	1000683a 	jmp	r2
    89dc:	00008d74 	movhi	zero,565
    89e0:	000089b8 	rdprs	zero,zero,550
    89e4:	000089b8 	rdprs	zero,zero,550
    89e8:	000089b8 	rdprs	zero,zero,550
    89ec:	000089b8 	rdprs	zero,zero,550
    89f0:	000089b8 	rdprs	zero,zero,550
    89f4:	000089b8 	rdprs	zero,zero,550
    89f8:	000089b8 	rdprs	zero,zero,550
    89fc:	000089b8 	rdprs	zero,zero,550
    8a00:	000089b8 	rdprs	zero,zero,550
    8a04:	000089b8 	rdprs	zero,zero,550
    8a08:	00008d84 	movi	zero,566
    8a0c:	00008a60 	cmpeqi	zero,zero,553
    8a10:	000089b8 	rdprs	zero,zero,550
    8a14:	000089b8 	rdprs	zero,zero,550
    8a18:	000089b8 	rdprs	zero,zero,550
    8a1c:	000089b8 	rdprs	zero,zero,550
    8a20:	00008a60 	cmpeqi	zero,zero,553
    8a24:	000089b8 	rdprs	zero,zero,550
    8a28:	000089b8 	rdprs	zero,zero,550
    8a2c:	000089b8 	rdprs	zero,zero,550
    8a30:	000089b8 	rdprs	zero,zero,550
    8a34:	000089b8 	rdprs	zero,zero,550
    8a38:	00008b48 	cmpgei	zero,zero,557
    8a3c:	000089b8 	rdprs	zero,zero,550
    8a40:	000089b8 	rdprs	zero,zero,550
    8a44:	000089b8 	rdprs	zero,zero,550
    8a48:	00008dd0 	cmplti	zero,zero,567
    8a4c:	000089b8 	rdprs	zero,zero,550
    8a50:	00008b4c 	andi	zero,zero,557
    8a54:	000089b8 	rdprs	zero,zero,550
    8a58:	000089b8 	rdprs	zero,zero,550
    8a5c:	00008d7c 	xorhi	zero,zero,565
    8a60:	d8c00d17 	ldw	r3,52(sp)
    8a64:	18003926 	beq	r3,zero,8b4c <___vfprintf_internal_r+0x350>
    8a68:	d9000e17 	ldw	r4,56(sp)
    8a6c:	00c00044 	movi	r3,1
    8a70:	25400017 	ldw	r21,0(r4)
    8a74:	21000104 	addi	r4,r4,4
    8a78:	d9000e15 	stw	r4,56(sp)
    8a7c:	d8c00d15 	stw	r3,52(sp)
    8a80:	a8012116 	blt	r21,zero,8f08 <___vfprintf_internal_r+0x70c>
    8a84:	d8001215 	stw	zero,72(sp)
    8a88:	d823883a 	mov	r17,sp
    8a8c:	a800371e 	bne	r21,zero,8b6c <___vfprintf_internal_r+0x370>
    8a90:	d9400b17 	ldw	r5,44(sp)
    8a94:	d809883a 	mov	r4,sp
    8a98:	01400b0e 	bge	zero,r5,8ac8 <___vfprintf_internal_r+0x2cc>
    8a9c:	d8800b17 	ldw	r2,44(sp)
    8aa0:	d823883a 	mov	r17,sp
    8aa4:	00c00c04 	movi	r3,48
    8aa8:	00000206 	br	8ab4 <___vfprintf_internal_r+0x2b8>
    8aac:	d9400a17 	ldw	r5,40(sp)
    8ab0:	89400426 	beq	r17,r5,8ac4 <___vfprintf_internal_r+0x2c8>
    8ab4:	88c00005 	stb	r3,0(r17)
    8ab8:	10bfffc4 	addi	r2,r2,-1
    8abc:	8c400044 	addi	r17,r17,1
    8ac0:	103ffa1e 	bne	r2,zero,8aac <_gp+0xffff5c54>
    8ac4:	892bc83a 	sub	r21,r17,r4
    8ac8:	d8c01217 	ldw	r3,72(sp)
    8acc:	d9000c17 	ldw	r4,48(sp)
    8ad0:	a8c5883a 	add	r2,r21,r3
    8ad4:	d8c01017 	ldw	r3,64(sp)
    8ad8:	2085c83a 	sub	r2,r4,r2
    8adc:	d8801115 	stw	r2,68(sp)
    8ae0:	18007f26 	beq	r3,zero,8ce0 <___vfprintf_internal_r+0x4e4>
    8ae4:	d8c01217 	ldw	r3,72(sp)
    8ae8:	1800fa1e 	bne	r3,zero,8ed4 <___vfprintf_internal_r+0x6d8>
    8aec:	d8c01117 	ldw	r3,68(sp)
    8af0:	00c0620e 	bge	zero,r3,8c7c <___vfprintf_internal_r+0x480>
    8af4:	00800c04 	movi	r2,48
    8af8:	d88008c5 	stb	r2,35(sp)
    8afc:	b805883a 	mov	r2,r23
    8b00:	dc001215 	stw	r16,72(sp)
    8b04:	882f883a 	mov	r23,r17
    8b08:	1f3fffc4 	addi	fp,r3,-1
    8b0c:	05bfffc4 	movi	r22,-1
    8b10:	dc000f17 	ldw	r16,60(sp)
    8b14:	1023883a 	mov	r17,r2
    8b18:	00000206 	br	8b24 <___vfprintf_internal_r+0x328>
    8b1c:	e73fffc4 	addi	fp,fp,-1
    8b20:	e580fc26 	beq	fp,r22,8f14 <___vfprintf_internal_r+0x718>
    8b24:	88800117 	ldw	r2,4(r17)
    8b28:	8009883a 	mov	r4,r16
    8b2c:	880b883a 	mov	r5,r17
    8b30:	d98008c4 	addi	r6,sp,35
    8b34:	01c00044 	movi	r7,1
    8b38:	103ee83a 	callr	r2
    8b3c:	103ff726 	beq	r2,zero,8b1c <_gp+0xffff5cc4>
    8b40:	04bfffc4 	movi	r18,-1
    8b44:	003f6206 	br	88d0 <_gp+0xffff5a78>
    8b48:	05000204 	movi	r20,8
    8b4c:	d9400e17 	ldw	r5,56(sp)
    8b50:	2d400017 	ldw	r21,0(r5)
    8b54:	29400104 	addi	r5,r5,4
    8b58:	d9400e15 	stw	r5,56(sp)
    8b5c:	d8000d15 	stw	zero,52(sp)
    8b60:	d8001215 	stw	zero,72(sp)
    8b64:	d823883a 	mov	r17,sp
    8b68:	a83fc926 	beq	r21,zero,8a90 <_gp+0xffff5c38>
    8b6c:	05800244 	movi	r22,9
    8b70:	dc001115 	stw	r16,68(sp)
    8b74:	df001417 	ldw	fp,80(sp)
    8b78:	00000506 	br	8b90 <___vfprintf_internal_r+0x394>
    8b7c:	15400c04 	addi	r21,r2,48
    8b80:	8d400005 	stb	r21,0(r17)
    8b84:	802b883a 	mov	r21,r16
    8b88:	8c400044 	addi	r17,r17,1
    8b8c:	80000f26 	beq	r16,zero,8bcc <___vfprintf_internal_r+0x3d0>
    8b90:	a809883a 	mov	r4,r21
    8b94:	a00b883a 	mov	r5,r20
    8b98:	00086840 	call	8684 <__udivsi3>
    8b9c:	a009883a 	mov	r4,r20
    8ba0:	100b883a 	mov	r5,r2
    8ba4:	1021883a 	mov	r16,r2
    8ba8:	000915c0 	call	915c <__mulsi3>
    8bac:	a885c83a 	sub	r2,r21,r2
    8bb0:	b0bff20e 	bge	r22,r2,8b7c <_gp+0xffff5d24>
    8bb4:	e0000e26 	beq	fp,zero,8bf0 <___vfprintf_internal_r+0x3f4>
    8bb8:	15400dc4 	addi	r21,r2,55
    8bbc:	8d400005 	stb	r21,0(r17)
    8bc0:	802b883a 	mov	r21,r16
    8bc4:	8c400044 	addi	r17,r17,1
    8bc8:	803ff11e 	bne	r16,zero,8b90 <_gp+0xffff5d38>
    8bcc:	d9000b17 	ldw	r4,44(sp)
    8bd0:	8eebc83a 	sub	r21,r17,sp
    8bd4:	dc001117 	ldw	r16,68(sp)
    8bd8:	2545c83a 	sub	r2,r4,r21
    8bdc:	d809883a 	mov	r4,sp
    8be0:	00bfb90e 	bge	zero,r2,8ac8 <_gp+0xffff5c70>
    8be4:	d8c00a17 	ldw	r3,40(sp)
    8be8:	88ffae36 	bltu	r17,r3,8aa4 <_gp+0xffff5c4c>
    8bec:	003fb606 	br	8ac8 <_gp+0xffff5c70>
    8bf0:	154015c4 	addi	r21,r2,87
    8bf4:	003fe206 	br	8b80 <_gp+0xffff5d28>
    8bf8:	00c00044 	movi	r3,1
    8bfc:	013fffc4 	movi	r4,-1
    8c00:	d8c00d15 	stw	r3,52(sp)
    8c04:	d9000b15 	stw	r4,44(sp)
    8c08:	d8001415 	stw	zero,80(sp)
    8c0c:	05000284 	movi	r20,10
    8c10:	d9000c15 	stw	r4,48(sp)
    8c14:	d8001315 	stw	zero,76(sp)
    8c18:	d8001015 	stw	zero,64(sp)
    8c1c:	182b883a 	mov	r21,r3
    8c20:	003f1106 	br	8868 <_gp+0xffff5a10>
    8c24:	00c00044 	movi	r3,1
    8c28:	d8c01315 	stw	r3,76(sp)
    8c2c:	054000c4 	movi	r21,3
    8c30:	003f0d06 	br	8868 <_gp+0xffff5a10>
    8c34:	d8c01117 	ldw	r3,68(sp)
    8c38:	dc001517 	ldw	r16,84(sp)
    8c3c:	8805883a 	mov	r2,r17
    8c40:	90e5883a 	add	r18,r18,r3
    8c44:	b823883a 	mov	r17,r23
    8c48:	102f883a 	mov	r23,r2
    8c4c:	d8c01217 	ldw	r3,72(sp)
    8c50:	18000a26 	beq	r3,zero,8c7c <___vfprintf_internal_r+0x480>
    8c54:	b8800117 	ldw	r2,4(r23)
    8c58:	d9000f17 	ldw	r4,60(sp)
    8c5c:	00c00b44 	movi	r3,45
    8c60:	d8c00905 	stb	r3,36(sp)
    8c64:	b80b883a 	mov	r5,r23
    8c68:	d9800904 	addi	r6,sp,36
    8c6c:	01c00044 	movi	r7,1
    8c70:	103ee83a 	callr	r2
    8c74:	103fb21e 	bne	r2,zero,8b40 <_gp+0xffff5ce8>
    8c78:	94800044 	addi	r18,r18,1
    8c7c:	8d6dc83a 	sub	r22,r17,r21
    8c80:	057f4d0e 	bge	zero,r21,89b8 <_gp+0xffff5b60>
    8c84:	dd400f17 	ldw	r21,60(sp)
    8c88:	00000206 	br	8c94 <___vfprintf_internal_r+0x498>
    8c8c:	94800044 	addi	r18,r18,1
    8c90:	8dbf4926 	beq	r17,r22,89b8 <_gp+0xffff5b60>
    8c94:	8c7fffc4 	addi	r17,r17,-1
    8c98:	88c00003 	ldbu	r3,0(r17)
    8c9c:	b8800117 	ldw	r2,4(r23)
    8ca0:	a809883a 	mov	r4,r21
    8ca4:	d8c00905 	stb	r3,36(sp)
    8ca8:	b80b883a 	mov	r5,r23
    8cac:	d9800904 	addi	r6,sp,36
    8cb0:	01c00044 	movi	r7,1
    8cb4:	103ee83a 	callr	r2
    8cb8:	103ff426 	beq	r2,zero,8c8c <_gp+0xffff5e34>
    8cbc:	04bfffc4 	movi	r18,-1
    8cc0:	003f0306 	br	88d0 <_gp+0xffff5a78>
    8cc4:	dd401015 	stw	r21,64(sp)
    8cc8:	05400084 	movi	r21,2
    8ccc:	003ee606 	br	8868 <_gp+0xffff5a10>
    8cd0:	0005883a 	mov	r2,zero
    8cd4:	003f2806 	br	8978 <_gp+0xffff5b20>
    8cd8:	0005883a 	mov	r2,zero
    8cdc:	003f1606 	br	8938 <_gp+0xffff5ae0>
    8ce0:	d8c01117 	ldw	r3,68(sp)
    8ce4:	00ffd90e 	bge	zero,r3,8c4c <_gp+0xffff5df4>
    8ce8:	00800804 	movi	r2,32
    8cec:	d8800885 	stb	r2,34(sp)
    8cf0:	b805883a 	mov	r2,r23
    8cf4:	dc001515 	stw	r16,84(sp)
    8cf8:	882f883a 	mov	r23,r17
    8cfc:	1f3fffc4 	addi	fp,r3,-1
    8d00:	05bfffc4 	movi	r22,-1
    8d04:	dc000f17 	ldw	r16,60(sp)
    8d08:	1023883a 	mov	r17,r2
    8d0c:	00000206 	br	8d18 <___vfprintf_internal_r+0x51c>
    8d10:	e73fffc4 	addi	fp,fp,-1
    8d14:	e5bfc726 	beq	fp,r22,8c34 <_gp+0xffff5ddc>
    8d18:	88800117 	ldw	r2,4(r17)
    8d1c:	8009883a 	mov	r4,r16
    8d20:	880b883a 	mov	r5,r17
    8d24:	d9800884 	addi	r6,sp,34
    8d28:	01c00044 	movi	r7,1
    8d2c:	103ee83a 	callr	r2
    8d30:	103ff726 	beq	r2,zero,8d10 <_gp+0xffff5eb8>
    8d34:	04bfffc4 	movi	r18,-1
    8d38:	003ee506 	br	88d0 <_gp+0xffff5a78>
    8d3c:	01000044 	movi	r4,1
    8d40:	d9000b15 	stw	r4,44(sp)
    8d44:	003f1806 	br	89a8 <_gp+0xffff5b50>
    8d48:	b8c00117 	ldw	r3,4(r23)
    8d4c:	d9000f17 	ldw	r4,60(sp)
    8d50:	d8800905 	stb	r2,36(sp)
    8d54:	b80b883a 	mov	r5,r23
    8d58:	d9800904 	addi	r6,sp,36
    8d5c:	a80f883a 	mov	r7,r21
    8d60:	183ee83a 	callr	r3
    8d64:	103f761e 	bne	r2,zero,8b40 <_gp+0xffff5ce8>
    8d68:	94800044 	addi	r18,r18,1
    8d6c:	002b883a 	mov	r21,zero
    8d70:	003ebd06 	br	8868 <_gp+0xffff5a10>
    8d74:	00c00044 	movi	r3,1
    8d78:	d8c01415 	stw	r3,80(sp)
    8d7c:	05000404 	movi	r20,16
    8d80:	003f7206 	br	8b4c <_gp+0xffff5cf4>
    8d84:	d9000c17 	ldw	r4,48(sp)
    8d88:	9900420e 	bge	r19,r4,8e94 <___vfprintf_internal_r+0x698>
    8d8c:	df000f17 	ldw	fp,60(sp)
    8d90:	25bfffc4 	addi	r22,r4,-1
    8d94:	00800804 	movi	r2,32
    8d98:	d8800845 	stb	r2,33(sp)
    8d9c:	b023883a 	mov	r17,r22
    8da0:	057fffc4 	movi	r21,-1
    8da4:	8c7fffc4 	addi	r17,r17,-1
    8da8:	8d403926 	beq	r17,r21,8e90 <___vfprintf_internal_r+0x694>
    8dac:	b8800117 	ldw	r2,4(r23)
    8db0:	e009883a 	mov	r4,fp
    8db4:	b80b883a 	mov	r5,r23
    8db8:	d9800844 	addi	r6,sp,33
    8dbc:	01c00044 	movi	r7,1
    8dc0:	103ee83a 	callr	r2
    8dc4:	103ff726 	beq	r2,zero,8da4 <_gp+0xffff5f4c>
    8dc8:	04bfffc4 	movi	r18,-1
    8dcc:	003ec006 	br	88d0 <_gp+0xffff5a78>
    8dd0:	d9000e17 	ldw	r4,56(sp)
    8dd4:	d8c00e17 	ldw	r3,56(sp)
    8dd8:	21000017 	ldw	r4,0(r4)
    8ddc:	18c00104 	addi	r3,r3,4
    8de0:	d8c00e15 	stw	r3,56(sp)
    8de4:	d9001215 	stw	r4,72(sp)
    8de8:	00087d40 	call	87d4 <strlen>
    8dec:	d9000c17 	ldw	r4,48(sp)
    8df0:	102d883a 	mov	r22,r2
    8df4:	20b9c83a 	sub	fp,r4,r2
    8df8:	07001b0e 	bge	zero,fp,8e68 <___vfprintf_internal_r+0x66c>
    8dfc:	00800804 	movi	r2,32
    8e00:	d8800805 	stb	r2,32(sp)
    8e04:	b805883a 	mov	r2,r23
    8e08:	dc001115 	stw	r16,68(sp)
    8e0c:	b02f883a 	mov	r23,r22
    8e10:	e47fffc4 	addi	r17,fp,-1
    8e14:	902d883a 	mov	r22,r18
    8e18:	057fffc4 	movi	r21,-1
    8e1c:	dc000f17 	ldw	r16,60(sp)
    8e20:	1025883a 	mov	r18,r2
    8e24:	00000206 	br	8e30 <___vfprintf_internal_r+0x634>
    8e28:	8c7fffc4 	addi	r17,r17,-1
    8e2c:	8d400826 	beq	r17,r21,8e50 <___vfprintf_internal_r+0x654>
    8e30:	90800117 	ldw	r2,4(r18)
    8e34:	8009883a 	mov	r4,r16
    8e38:	900b883a 	mov	r5,r18
    8e3c:	d9800804 	addi	r6,sp,32
    8e40:	01c00044 	movi	r7,1
    8e44:	103ee83a 	callr	r2
    8e48:	103ff726 	beq	r2,zero,8e28 <_gp+0xffff5fd0>
    8e4c:	003f3c06 	br	8b40 <_gp+0xffff5ce8>
    8e50:	dc001117 	ldw	r16,68(sp)
    8e54:	9005883a 	mov	r2,r18
    8e58:	b025883a 	mov	r18,r22
    8e5c:	9725883a 	add	r18,r18,fp
    8e60:	b82d883a 	mov	r22,r23
    8e64:	102f883a 	mov	r23,r2
    8e68:	b8800117 	ldw	r2,4(r23)
    8e6c:	d9000f17 	ldw	r4,60(sp)
    8e70:	d9801217 	ldw	r6,72(sp)
    8e74:	b80b883a 	mov	r5,r23
    8e78:	b00f883a 	mov	r7,r22
    8e7c:	103ee83a 	callr	r2
    8e80:	103f2f1e 	bne	r2,zero,8b40 <_gp+0xffff5ce8>
    8e84:	95a5883a 	add	r18,r18,r22
    8e88:	002b883a 	mov	r21,zero
    8e8c:	003e7606 	br	8868 <_gp+0xffff5a10>
    8e90:	95a5883a 	add	r18,r18,r22
    8e94:	d9400e17 	ldw	r5,56(sp)
    8e98:	b8800117 	ldw	r2,4(r23)
    8e9c:	d9000f17 	ldw	r4,60(sp)
    8ea0:	28c00017 	ldw	r3,0(r5)
    8ea4:	d9800904 	addi	r6,sp,36
    8ea8:	b80b883a 	mov	r5,r23
    8eac:	d8c00905 	stb	r3,36(sp)
    8eb0:	d8c00e17 	ldw	r3,56(sp)
    8eb4:	01c00044 	movi	r7,1
    8eb8:	1c400104 	addi	r17,r3,4
    8ebc:	103ee83a 	callr	r2
    8ec0:	103f1f1e 	bne	r2,zero,8b40 <_gp+0xffff5ce8>
    8ec4:	94800044 	addi	r18,r18,1
    8ec8:	dc400e15 	stw	r17,56(sp)
    8ecc:	002b883a 	mov	r21,zero
    8ed0:	003e6506 	br	8868 <_gp+0xffff5a10>
    8ed4:	b8800117 	ldw	r2,4(r23)
    8ed8:	d9000f17 	ldw	r4,60(sp)
    8edc:	00c00b44 	movi	r3,45
    8ee0:	d8c00905 	stb	r3,36(sp)
    8ee4:	b80b883a 	mov	r5,r23
    8ee8:	d9800904 	addi	r6,sp,36
    8eec:	01c00044 	movi	r7,1
    8ef0:	103ee83a 	callr	r2
    8ef4:	103f121e 	bne	r2,zero,8b40 <_gp+0xffff5ce8>
    8ef8:	d8c01117 	ldw	r3,68(sp)
    8efc:	94800044 	addi	r18,r18,1
    8f00:	00fefc16 	blt	zero,r3,8af4 <_gp+0xffff5c9c>
    8f04:	003f5d06 	br	8c7c <_gp+0xffff5e24>
    8f08:	056bc83a 	sub	r21,zero,r21
    8f0c:	d8c01215 	stw	r3,72(sp)
    8f10:	003f1406 	br	8b64 <_gp+0xffff5d0c>
    8f14:	d8c01117 	ldw	r3,68(sp)
    8f18:	8805883a 	mov	r2,r17
    8f1c:	dc001217 	ldw	r16,72(sp)
    8f20:	b823883a 	mov	r17,r23
    8f24:	90e5883a 	add	r18,r18,r3
    8f28:	102f883a 	mov	r23,r2
    8f2c:	003f5306 	br	8c7c <_gp+0xffff5e24>

00008f30 <__vfprintf_internal>:
    8f30:	00800074 	movhi	r2,1
    8f34:	10ab9704 	addi	r2,r2,-20900
    8f38:	2007883a 	mov	r3,r4
    8f3c:	11000017 	ldw	r4,0(r2)
    8f40:	2805883a 	mov	r2,r5
    8f44:	300f883a 	mov	r7,r6
    8f48:	180b883a 	mov	r5,r3
    8f4c:	100d883a 	mov	r6,r2
    8f50:	00087fc1 	jmpi	87fc <___vfprintf_internal_r>

00008f54 <__sfvwrite_small_dev>:
    8f54:	2880000b 	ldhu	r2,0(r5)
    8f58:	defffa04 	addi	sp,sp,-24
    8f5c:	dcc00315 	stw	r19,12(sp)
    8f60:	10c0020c 	andi	r3,r2,8
    8f64:	18ffffcc 	andi	r3,r3,65535
    8f68:	18e0001c 	xori	r3,r3,32768
    8f6c:	dc800215 	stw	r18,8(sp)
    8f70:	dc400115 	stw	r17,4(sp)
    8f74:	dfc00515 	stw	ra,20(sp)
    8f78:	dd000415 	stw	r20,16(sp)
    8f7c:	dc000015 	stw	r16,0(sp)
    8f80:	18e00004 	addi	r3,r3,-32768
    8f84:	2825883a 	mov	r18,r5
    8f88:	2027883a 	mov	r19,r4
    8f8c:	3023883a 	mov	r17,r6
    8f90:	18002626 	beq	r3,zero,902c <__sfvwrite_small_dev+0xd8>
    8f94:	2940008f 	ldh	r5,2(r5)
    8f98:	28001016 	blt	r5,zero,8fdc <__sfvwrite_small_dev+0x88>
    8f9c:	01c01a0e 	bge	zero,r7,9008 <__sfvwrite_small_dev+0xb4>
    8fa0:	3821883a 	mov	r16,r7
    8fa4:	05010004 	movi	r20,1024
    8fa8:	00000306 	br	8fb8 <__sfvwrite_small_dev+0x64>
    8fac:	88a3883a 	add	r17,r17,r2
    8fb0:	0400150e 	bge	zero,r16,9008 <__sfvwrite_small_dev+0xb4>
    8fb4:	9140008f 	ldh	r5,2(r18)
    8fb8:	880d883a 	mov	r6,r17
    8fbc:	9809883a 	mov	r4,r19
    8fc0:	800f883a 	mov	r7,r16
    8fc4:	a400010e 	bge	r20,r16,8fcc <__sfvwrite_small_dev+0x78>
    8fc8:	01c10004 	movi	r7,1024
    8fcc:	00090f00 	call	90f0 <_write_r>
    8fd0:	80a1c83a 	sub	r16,r16,r2
    8fd4:	00bff516 	blt	zero,r2,8fac <_gp+0xffff6154>
    8fd8:	9080000b 	ldhu	r2,0(r18)
    8fdc:	10801014 	ori	r2,r2,64
    8fe0:	9080000d 	sth	r2,0(r18)
    8fe4:	00bfffc4 	movi	r2,-1
    8fe8:	dfc00517 	ldw	ra,20(sp)
    8fec:	dd000417 	ldw	r20,16(sp)
    8ff0:	dcc00317 	ldw	r19,12(sp)
    8ff4:	dc800217 	ldw	r18,8(sp)
    8ff8:	dc400117 	ldw	r17,4(sp)
    8ffc:	dc000017 	ldw	r16,0(sp)
    9000:	dec00604 	addi	sp,sp,24
    9004:	f800283a 	ret
    9008:	0005883a 	mov	r2,zero
    900c:	dfc00517 	ldw	ra,20(sp)
    9010:	dd000417 	ldw	r20,16(sp)
    9014:	dcc00317 	ldw	r19,12(sp)
    9018:	dc800217 	ldw	r18,8(sp)
    901c:	dc400117 	ldw	r17,4(sp)
    9020:	dc000017 	ldw	r16,0(sp)
    9024:	dec00604 	addi	sp,sp,24
    9028:	f800283a 	ret
    902c:	00bfffc4 	movi	r2,-1
    9030:	003fed06 	br	8fe8 <_gp+0xffff6190>

00009034 <putc>:
    9034:	defffd04 	addi	sp,sp,-12
    9038:	00800074 	movhi	r2,1
    903c:	10ab9704 	addi	r2,r2,-20900
    9040:	dc000115 	stw	r16,4(sp)
    9044:	2021883a 	mov	r16,r4
    9048:	11000017 	ldw	r4,0(r2)
    904c:	dfc00215 	stw	ra,8(sp)
    9050:	00800074 	movhi	r2,1
    9054:	10a3d504 	addi	r2,r2,-28844
    9058:	28800115 	stw	r2,4(r5)
    905c:	d80d883a 	mov	r6,sp
    9060:	01c00044 	movi	r7,1
    9064:	dc000005 	stb	r16,0(sp)
    9068:	103ee83a 	callr	r2
    906c:	00ffffc4 	movi	r3,-1
    9070:	10c00526 	beq	r2,r3,9088 <putc+0x54>
    9074:	8005883a 	mov	r2,r16
    9078:	dfc00217 	ldw	ra,8(sp)
    907c:	dc000117 	ldw	r16,4(sp)
    9080:	dec00304 	addi	sp,sp,12
    9084:	f800283a 	ret
    9088:	1021883a 	mov	r16,r2
    908c:	003ff906 	br	9074 <_gp+0xffff621c>

00009090 <_putc_r>:
    9090:	00800074 	movhi	r2,1
    9094:	10ab9704 	addi	r2,r2,-20900
    9098:	defffd04 	addi	sp,sp,-12
    909c:	11000017 	ldw	r4,0(r2)
    90a0:	dc000115 	stw	r16,4(sp)
    90a4:	dfc00215 	stw	ra,8(sp)
    90a8:	00800074 	movhi	r2,1
    90ac:	10a3d504 	addi	r2,r2,-28844
    90b0:	2821883a 	mov	r16,r5
    90b4:	30800115 	stw	r2,4(r6)
    90b8:	300b883a 	mov	r5,r6
    90bc:	01c00044 	movi	r7,1
    90c0:	d80d883a 	mov	r6,sp
    90c4:	dc000005 	stb	r16,0(sp)
    90c8:	103ee83a 	callr	r2
    90cc:	00ffffc4 	movi	r3,-1
    90d0:	10c00526 	beq	r2,r3,90e8 <_putc_r+0x58>
    90d4:	8005883a 	mov	r2,r16
    90d8:	dfc00217 	ldw	ra,8(sp)
    90dc:	dc000117 	ldw	r16,4(sp)
    90e0:	dec00304 	addi	sp,sp,12
    90e4:	f800283a 	ret
    90e8:	1021883a 	mov	r16,r2
    90ec:	003ff906 	br	90d4 <_gp+0xffff627c>

000090f0 <_write_r>:
    90f0:	defffd04 	addi	sp,sp,-12
    90f4:	dc400115 	stw	r17,4(sp)
    90f8:	dc000015 	stw	r16,0(sp)
    90fc:	2023883a 	mov	r17,r4
    9100:	04000074 	movhi	r16,1
    9104:	842c5b04 	addi	r16,r16,-20116
    9108:	2809883a 	mov	r4,r5
    910c:	300b883a 	mov	r5,r6
    9110:	380d883a 	mov	r6,r7
    9114:	dfc00215 	stw	ra,8(sp)
    9118:	80000015 	stw	zero,0(r16)
    911c:	00093580 	call	9358 <write>
    9120:	00ffffc4 	movi	r3,-1
    9124:	10c00526 	beq	r2,r3,913c <_write_r+0x4c>
    9128:	dfc00217 	ldw	ra,8(sp)
    912c:	dc400117 	ldw	r17,4(sp)
    9130:	dc000017 	ldw	r16,0(sp)
    9134:	dec00304 	addi	sp,sp,12
    9138:	f800283a 	ret
    913c:	80c00017 	ldw	r3,0(r16)
    9140:	183ff926 	beq	r3,zero,9128 <_gp+0xffff62d0>
    9144:	88c00015 	stw	r3,0(r17)
    9148:	dfc00217 	ldw	ra,8(sp)
    914c:	dc400117 	ldw	r17,4(sp)
    9150:	dc000017 	ldw	r16,0(sp)
    9154:	dec00304 	addi	sp,sp,12
    9158:	f800283a 	ret

0000915c <__mulsi3>:
    915c:	0005883a 	mov	r2,zero
    9160:	20000726 	beq	r4,zero,9180 <__mulsi3+0x24>
    9164:	20c0004c 	andi	r3,r4,1
    9168:	2008d07a 	srli	r4,r4,1
    916c:	18000126 	beq	r3,zero,9174 <__mulsi3+0x18>
    9170:	1145883a 	add	r2,r2,r5
    9174:	294b883a 	add	r5,r5,r5
    9178:	203ffa1e 	bne	r4,zero,9164 <_gp+0xffff630c>
    917c:	f800283a 	ret
    9180:	f800283a 	ret

00009184 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    9184:	defffc04 	addi	sp,sp,-16
    9188:	df000315 	stw	fp,12(sp)
    918c:	df000304 	addi	fp,sp,12
    9190:	e13ffd15 	stw	r4,-12(fp)
    9194:	e17ffe15 	stw	r5,-8(fp)
    9198:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    919c:	e0fffe17 	ldw	r3,-8(fp)
    91a0:	e0bffd17 	ldw	r2,-12(fp)
    91a4:	18800e26 	beq	r3,r2,91e0 <alt_load_section+0x5c>
  {
    while( to != end )
    91a8:	00000a06 	br	91d4 <alt_load_section+0x50>
    {
      *to++ = *from++;
    91ac:	e0bffd17 	ldw	r2,-12(fp)
    91b0:	10c00017 	ldw	r3,0(r2)
    91b4:	e0bffe17 	ldw	r2,-8(fp)
    91b8:	10c00015 	stw	r3,0(r2)
    91bc:	e0bffe17 	ldw	r2,-8(fp)
    91c0:	10800104 	addi	r2,r2,4
    91c4:	e0bffe15 	stw	r2,-8(fp)
    91c8:	e0bffd17 	ldw	r2,-12(fp)
    91cc:	10800104 	addi	r2,r2,4
    91d0:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    91d4:	e0fffe17 	ldw	r3,-8(fp)
    91d8:	e0bfff17 	ldw	r2,-4(fp)
    91dc:	18bff31e 	bne	r3,r2,91ac <_gp+0xffff6354>
    {
      *to++ = *from++;
    }
  }
}
    91e0:	e037883a 	mov	sp,fp
    91e4:	df000017 	ldw	fp,0(sp)
    91e8:	dec00104 	addi	sp,sp,4
    91ec:	f800283a 	ret

000091f0 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    91f0:	defffe04 	addi	sp,sp,-8
    91f4:	dfc00115 	stw	ra,4(sp)
    91f8:	df000015 	stw	fp,0(sp)
    91fc:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    9200:	01000074 	movhi	r4,1
    9204:	212ba104 	addi	r4,r4,-20860
    9208:	01400074 	movhi	r5,1
    920c:	296ae904 	addi	r5,r5,-21596
    9210:	01800074 	movhi	r6,1
    9214:	31aba104 	addi	r6,r6,-20860
    9218:	00091840 	call	9184 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    921c:	01000074 	movhi	r4,1
    9220:	21200804 	addi	r4,r4,-32736
    9224:	01400074 	movhi	r5,1
    9228:	29600804 	addi	r5,r5,-32736
    922c:	01800074 	movhi	r6,1
    9230:	31a06e04 	addi	r6,r6,-32328
    9234:	00091840 	call	9184 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    9238:	01000074 	movhi	r4,1
    923c:	212aa504 	addi	r4,r4,-21868
    9240:	01400074 	movhi	r5,1
    9244:	296aa504 	addi	r5,r5,-21868
    9248:	01800074 	movhi	r6,1
    924c:	31aae904 	addi	r6,r6,-21596
    9250:	00091840 	call	9184 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    9254:	0009ab80 	call	9ab8 <alt_dcache_flush_all>
  alt_icache_flush_all();
    9258:	0009bf00 	call	9bf0 <alt_icache_flush_all>
}
    925c:	e037883a 	mov	sp,fp
    9260:	dfc00117 	ldw	ra,4(sp)
    9264:	df000017 	ldw	fp,0(sp)
    9268:	dec00204 	addi	sp,sp,8
    926c:	f800283a 	ret

00009270 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    9270:	defffd04 	addi	sp,sp,-12
    9274:	dfc00215 	stw	ra,8(sp)
    9278:	df000115 	stw	fp,4(sp)
    927c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    9280:	0009883a 	mov	r4,zero
    9284:	00094800 	call	9480 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    9288:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    928c:	00094b40 	call	94b4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    9290:	01000074 	movhi	r4,1
    9294:	212ade04 	addi	r4,r4,-21640
    9298:	01400074 	movhi	r5,1
    929c:	296ade04 	addi	r5,r5,-21640
    92a0:	01800074 	movhi	r6,1
    92a4:	31aade04 	addi	r6,r6,-21640
    92a8:	0009fc80 	call	9fc8 <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    92ac:	d120c617 	ldw	r4,-31976(gp)
    92b0:	d0e0c717 	ldw	r3,-31972(gp)
    92b4:	d0a0c817 	ldw	r2,-31968(gp)
    92b8:	180b883a 	mov	r5,r3
    92bc:	100d883a 	mov	r6,r2
    92c0:	00084640 	call	8464 <main>
    92c4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    92c8:	01000044 	movi	r4,1
    92cc:	00099ec0 	call	99ec <close>
  exit (result);
    92d0:	e13fff17 	ldw	r4,-4(fp)
    92d4:	000a8180 	call	a818 <exit>

000092d8 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
    92d8:	defffd04 	addi	sp,sp,-12
    92dc:	dfc00215 	stw	ra,8(sp)
    92e0:	df000115 	stw	fp,4(sp)
    92e4:	df000104 	addi	fp,sp,4
    92e8:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
    92ec:	e13fff17 	ldw	r4,-4(fp)
    92f0:	00098480 	call	9848 <alt_busy_sleep>
}
    92f4:	e037883a 	mov	sp,fp
    92f8:	dfc00117 	ldw	ra,4(sp)
    92fc:	df000017 	ldw	fp,0(sp)
    9300:	dec00204 	addi	sp,sp,8
    9304:	f800283a 	ret

00009308 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    9308:	defffe04 	addi	sp,sp,-8
    930c:	dfc00115 	stw	ra,4(sp)
    9310:	df000015 	stw	fp,0(sp)
    9314:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    9318:	00800074 	movhi	r2,1
    931c:	10ab9d04 	addi	r2,r2,-20876
    9320:	10800017 	ldw	r2,0(r2)
    9324:	10000526 	beq	r2,zero,933c <alt_get_errno+0x34>
    9328:	00800074 	movhi	r2,1
    932c:	10ab9d04 	addi	r2,r2,-20876
    9330:	10800017 	ldw	r2,0(r2)
    9334:	103ee83a 	callr	r2
    9338:	00000206 	br	9344 <alt_get_errno+0x3c>
    933c:	00800074 	movhi	r2,1
    9340:	10ac5b04 	addi	r2,r2,-20116
}
    9344:	e037883a 	mov	sp,fp
    9348:	dfc00117 	ldw	ra,4(sp)
    934c:	df000017 	ldw	fp,0(sp)
    9350:	dec00204 	addi	sp,sp,8
    9354:	f800283a 	ret

00009358 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    9358:	defff904 	addi	sp,sp,-28
    935c:	dfc00615 	stw	ra,24(sp)
    9360:	df000515 	stw	fp,20(sp)
    9364:	df000504 	addi	fp,sp,20
    9368:	e13ffd15 	stw	r4,-12(fp)
    936c:	e17ffe15 	stw	r5,-8(fp)
    9370:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    9374:	e0bffd17 	ldw	r2,-12(fp)
    9378:	10000716 	blt	r2,zero,9398 <write+0x40>
    937c:	e13ffd17 	ldw	r4,-12(fp)
    9380:	01400304 	movi	r5,12
    9384:	000915c0 	call	915c <__mulsi3>
    9388:	00c00074 	movhi	r3,1
    938c:	18eb3604 	addi	r3,r3,-21288
    9390:	10c5883a 	add	r2,r2,r3
    9394:	00000106 	br	939c <write+0x44>
    9398:	0005883a 	mov	r2,zero
    939c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    93a0:	e0bffb17 	ldw	r2,-20(fp)
    93a4:	10001f26 	beq	r2,zero,9424 <write+0xcc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    93a8:	e0bffb17 	ldw	r2,-20(fp)
    93ac:	10800217 	ldw	r2,8(r2)
    93b0:	108000cc 	andi	r2,r2,3
    93b4:	10001726 	beq	r2,zero,9414 <write+0xbc>
    93b8:	e0bffb17 	ldw	r2,-20(fp)
    93bc:	10800017 	ldw	r2,0(r2)
    93c0:	10800617 	ldw	r2,24(r2)
    93c4:	10001326 	beq	r2,zero,9414 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    93c8:	e0bffb17 	ldw	r2,-20(fp)
    93cc:	10800017 	ldw	r2,0(r2)
    93d0:	10c00617 	ldw	r3,24(r2)
    93d4:	e0bfff17 	ldw	r2,-4(fp)
    93d8:	e13ffb17 	ldw	r4,-20(fp)
    93dc:	e17ffe17 	ldw	r5,-8(fp)
    93e0:	100d883a 	mov	r6,r2
    93e4:	183ee83a 	callr	r3
    93e8:	e0bffc15 	stw	r2,-16(fp)
    93ec:	e0bffc17 	ldw	r2,-16(fp)
    93f0:	1000060e 	bge	r2,zero,940c <write+0xb4>
      {
        ALT_ERRNO = -rval;
    93f4:	00093080 	call	9308 <alt_get_errno>
    93f8:	e0fffc17 	ldw	r3,-16(fp)
    93fc:	00c7c83a 	sub	r3,zero,r3
    9400:	10c00015 	stw	r3,0(r2)
        return -1;
    9404:	00bfffc4 	movi	r2,-1
    9408:	00000a06 	br	9434 <write+0xdc>
      }
      return rval;
    940c:	e0bffc17 	ldw	r2,-16(fp)
    9410:	00000806 	br	9434 <write+0xdc>
    }
    else
    {
      ALT_ERRNO = EACCES;
    9414:	00093080 	call	9308 <alt_get_errno>
    9418:	00c00344 	movi	r3,13
    941c:	10c00015 	stw	r3,0(r2)
    9420:	00000306 	br	9430 <write+0xd8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    9424:	00093080 	call	9308 <alt_get_errno>
    9428:	00c01444 	movi	r3,81
    942c:	10c00015 	stw	r3,0(r2)
  }
  return -1;
    9430:	00bfffc4 	movi	r2,-1
}
    9434:	e037883a 	mov	sp,fp
    9438:	dfc00117 	ldw	ra,4(sp)
    943c:	df000017 	ldw	fp,0(sp)
    9440:	dec00204 	addi	sp,sp,8
    9444:	f800283a 	ret

00009448 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    9448:	defffd04 	addi	sp,sp,-12
    944c:	dfc00215 	stw	ra,8(sp)
    9450:	df000115 	stw	fp,4(sp)
    9454:	df000104 	addi	fp,sp,4
    9458:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    945c:	e13fff17 	ldw	r4,-4(fp)
    9460:	01400074 	movhi	r5,1
    9464:	296b9a04 	addi	r5,r5,-20888
    9468:	0009b500 	call	9b50 <alt_dev_llist_insert>
}
    946c:	e037883a 	mov	sp,fp
    9470:	dfc00117 	ldw	ra,4(sp)
    9474:	df000017 	ldw	fp,0(sp)
    9478:	dec00204 	addi	sp,sp,8
    947c:	f800283a 	ret

00009480 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    9480:	defffd04 	addi	sp,sp,-12
    9484:	dfc00215 	stw	ra,8(sp)
    9488:	df000115 	stw	fp,4(sp)
    948c:	df000104 	addi	fp,sp,4
    9490:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
    9494:	000a4f40 	call	a4f4 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    9498:	00800044 	movi	r2,1
    949c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    94a0:	e037883a 	mov	sp,fp
    94a4:	dfc00117 	ldw	ra,4(sp)
    94a8:	df000017 	ldw	fp,0(sp)
    94ac:	dec00204 	addi	sp,sp,8
    94b0:	f800283a 	ret

000094b4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    94b4:	defffe04 	addi	sp,sp,-8
    94b8:	dfc00115 	stw	ra,4(sp)
    94bc:	df000015 	stw	fp,0(sp)
    94c0:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYS_CLK_TIMER, sys_clk_timer);
    94c4:	01000074 	movhi	r4,1
    94c8:	21040004 	addi	r4,r4,4096
    94cc:	000b883a 	mov	r5,zero
    94d0:	01800044 	movi	r6,1
    94d4:	01c0fa04 	movi	r7,1000
    94d8:	00097c00 	call	97c0 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
    94dc:	01000074 	movhi	r4,1
    94e0:	212b2104 	addi	r4,r4,-21372
    94e4:	00094480 	call	9448 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYS_ID, sys_id);
    94e8:	0001883a 	nop
}
    94ec:	e037883a 	mov	sp,fp
    94f0:	dfc00117 	ldw	ra,4(sp)
    94f4:	df000017 	ldw	fp,0(sp)
    94f8:	dec00204 	addi	sp,sp,8
    94fc:	f800283a 	ret

00009500 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    9500:	defffa04 	addi	sp,sp,-24
    9504:	dfc00515 	stw	ra,20(sp)
    9508:	df000415 	stw	fp,16(sp)
    950c:	df000404 	addi	fp,sp,16
    9510:	e13ffd15 	stw	r4,-12(fp)
    9514:	e17ffe15 	stw	r5,-8(fp)
    9518:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    951c:	e0bffd17 	ldw	r2,-12(fp)
    9520:	10800017 	ldw	r2,0(r2)
    9524:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    9528:	e0bffc17 	ldw	r2,-16(fp)
    952c:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
    9530:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    9534:	10800217 	ldw	r2,8(r2)
    9538:	1809883a 	mov	r4,r3
    953c:	e17ffe17 	ldw	r5,-8(fp)
    9540:	e1bfff17 	ldw	r6,-4(fp)
    9544:	100f883a 	mov	r7,r2
    9548:	00095c00 	call	95c0 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    954c:	e037883a 	mov	sp,fp
    9550:	dfc00117 	ldw	ra,4(sp)
    9554:	df000017 	ldw	fp,0(sp)
    9558:	dec00204 	addi	sp,sp,8
    955c:	f800283a 	ret

00009560 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    9560:	defffa04 	addi	sp,sp,-24
    9564:	dfc00515 	stw	ra,20(sp)
    9568:	df000415 	stw	fp,16(sp)
    956c:	df000404 	addi	fp,sp,16
    9570:	e13ffd15 	stw	r4,-12(fp)
    9574:	e17ffe15 	stw	r5,-8(fp)
    9578:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    957c:	e0bffd17 	ldw	r2,-12(fp)
    9580:	10800017 	ldw	r2,0(r2)
    9584:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    9588:	e0bffc17 	ldw	r2,-16(fp)
    958c:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
    9590:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    9594:	10800217 	ldw	r2,8(r2)
    9598:	1809883a 	mov	r4,r3
    959c:	e17ffe17 	ldw	r5,-8(fp)
    95a0:	e1bfff17 	ldw	r6,-4(fp)
    95a4:	100f883a 	mov	r7,r2
    95a8:	00096b40 	call	96b4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    95ac:	e037883a 	mov	sp,fp
    95b0:	dfc00117 	ldw	ra,4(sp)
    95b4:	df000017 	ldw	fp,0(sp)
    95b8:	dec00204 	addi	sp,sp,8
    95bc:	f800283a 	ret

000095c0 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
    95c0:	defff704 	addi	sp,sp,-36
    95c4:	df000815 	stw	fp,32(sp)
    95c8:	df000804 	addi	fp,sp,32
    95cc:	e13ffc15 	stw	r4,-16(fp)
    95d0:	e17ffd15 	stw	r5,-12(fp)
    95d4:	e1bffe15 	stw	r6,-8(fp)
    95d8:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    95dc:	e0bffc17 	ldw	r2,-16(fp)
    95e0:	10800017 	ldw	r2,0(r2)
    95e4:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
    95e8:	e0bffd17 	ldw	r2,-12(fp)
    95ec:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
    95f0:	e0bffe17 	ldw	r2,-8(fp)
    95f4:	e0fffd17 	ldw	r3,-12(fp)
    95f8:	1885883a 	add	r2,r3,r2
    95fc:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
    9600:	00001406 	br	9654 <altera_avalon_jtag_uart_read+0x94>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    9604:	e0bff917 	ldw	r2,-28(fp)
    9608:	10800037 	ldwio	r2,0(r2)
    960c:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
    9610:	e0bffb17 	ldw	r2,-20(fp)
    9614:	10a0000c 	andi	r2,r2,32768
    9618:	10000826 	beq	r2,zero,963c <altera_avalon_jtag_uart_read+0x7c>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    961c:	e0bffb17 	ldw	r2,-20(fp)
    9620:	1007883a 	mov	r3,r2
    9624:	e0bff817 	ldw	r2,-32(fp)
    9628:	10c00005 	stb	r3,0(r2)
    962c:	e0bff817 	ldw	r2,-32(fp)
    9630:	10800044 	addi	r2,r2,1
    9634:	e0bff815 	stw	r2,-32(fp)
    9638:	00000606 	br	9654 <altera_avalon_jtag_uart_read+0x94>
    else if (ptr != buffer)
    963c:	e0fff817 	ldw	r3,-32(fp)
    9640:	e0bffd17 	ldw	r2,-12(fp)
    9644:	1880071e 	bne	r3,r2,9664 <altera_avalon_jtag_uart_read+0xa4>
      break;
    else if(flags & O_NONBLOCK)
    9648:	e0bfff17 	ldw	r2,-4(fp)
    964c:	1090000c 	andi	r2,r2,16384
    9650:	1000061e 	bne	r2,zero,966c <altera_avalon_jtag_uart_read+0xac>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
    9654:	e0fff817 	ldw	r3,-32(fp)
    9658:	e0bffa17 	ldw	r2,-24(fp)
    965c:	18bfe936 	bltu	r3,r2,9604 <_gp+0xffff67ac>
    9660:	00000306 	br	9670 <altera_avalon_jtag_uart_read+0xb0>
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    9664:	0001883a 	nop
    9668:	00000106 	br	9670 <altera_avalon_jtag_uart_read+0xb0>
    else if(flags & O_NONBLOCK)
      break;   
    966c:	0001883a 	nop
    
  }

  if (ptr != buffer)
    9670:	e0fff817 	ldw	r3,-32(fp)
    9674:	e0bffd17 	ldw	r2,-12(fp)
    9678:	18800426 	beq	r3,r2,968c <altera_avalon_jtag_uart_read+0xcc>
    return ptr - buffer;
    967c:	e0fff817 	ldw	r3,-32(fp)
    9680:	e0bffd17 	ldw	r2,-12(fp)
    9684:	1885c83a 	sub	r2,r3,r2
    9688:	00000606 	br	96a4 <altera_avalon_jtag_uart_read+0xe4>
  else if (flags & O_NONBLOCK)
    968c:	e0bfff17 	ldw	r2,-4(fp)
    9690:	1090000c 	andi	r2,r2,16384
    9694:	10000226 	beq	r2,zero,96a0 <altera_avalon_jtag_uart_read+0xe0>
    return -EWOULDBLOCK;
    9698:	00bffd44 	movi	r2,-11
    969c:	00000106 	br	96a4 <altera_avalon_jtag_uart_read+0xe4>
  else
    return -EIO;
    96a0:	00bffec4 	movi	r2,-5
}
    96a4:	e037883a 	mov	sp,fp
    96a8:	df000017 	ldw	fp,0(sp)
    96ac:	dec00104 	addi	sp,sp,4
    96b0:	f800283a 	ret

000096b4 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    96b4:	defff904 	addi	sp,sp,-28
    96b8:	df000615 	stw	fp,24(sp)
    96bc:	df000604 	addi	fp,sp,24
    96c0:	e13ffc15 	stw	r4,-16(fp)
    96c4:	e17ffd15 	stw	r5,-12(fp)
    96c8:	e1bffe15 	stw	r6,-8(fp)
    96cc:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    96d0:	e0bffc17 	ldw	r2,-16(fp)
    96d4:	10800017 	ldw	r2,0(r2)
    96d8:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
    96dc:	e0bffe17 	ldw	r2,-8(fp)
    96e0:	e0fffd17 	ldw	r3,-12(fp)
    96e4:	1885883a 	add	r2,r3,r2
    96e8:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
    96ec:	00000f06 	br	972c <altera_avalon_jtag_uart_write+0x78>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    96f0:	e0bffa17 	ldw	r2,-24(fp)
    96f4:	10800104 	addi	r2,r2,4
    96f8:	10800037 	ldwio	r2,0(r2)
    96fc:	10bfffec 	andhi	r2,r2,65535
    9700:	10000a26 	beq	r2,zero,972c <altera_avalon_jtag_uart_write+0x78>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    9704:	e0bffa17 	ldw	r2,-24(fp)
    9708:	e0fffd17 	ldw	r3,-12(fp)
    970c:	18c00003 	ldbu	r3,0(r3)
    9710:	18c03fcc 	andi	r3,r3,255
    9714:	18c0201c 	xori	r3,r3,128
    9718:	18ffe004 	addi	r3,r3,-128
    971c:	e13ffd17 	ldw	r4,-12(fp)
    9720:	21000044 	addi	r4,r4,1
    9724:	e13ffd15 	stw	r4,-12(fp)
    9728:	10c00035 	stwio	r3,0(r2)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    972c:	e0fffd17 	ldw	r3,-12(fp)
    9730:	e0bffb17 	ldw	r2,-20(fp)
    9734:	18bfee36 	bltu	r3,r2,96f0 <_gp+0xffff6898>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
    9738:	e0bffe17 	ldw	r2,-8(fp)
}
    973c:	e037883a 	mov	sp,fp
    9740:	df000017 	ldw	fp,0(sp)
    9744:	dec00104 	addi	sp,sp,4
    9748:	f800283a 	ret

0000974c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    974c:	defffa04 	addi	sp,sp,-24
    9750:	dfc00515 	stw	ra,20(sp)
    9754:	df000415 	stw	fp,16(sp)
    9758:	df000404 	addi	fp,sp,16
    975c:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    9760:	0007883a 	mov	r3,zero
    9764:	e0bfff17 	ldw	r2,-4(fp)
    9768:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    976c:	e0bfff17 	ldw	r2,-4(fp)
    9770:	10800104 	addi	r2,r2,4
    9774:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9778:	0005303a 	rdctl	r2,status
    977c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9780:	e0fffd17 	ldw	r3,-12(fp)
    9784:	00bfff84 	movi	r2,-2
    9788:	1884703a 	and	r2,r3,r2
    978c:	1001703a 	wrctl	status,r2
  
  return context;
    9790:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    9794:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
    9798:	000a3f00 	call	a3f0 <alt_tick>
    979c:	e0bffc17 	ldw	r2,-16(fp)
    97a0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    97a4:	e0bffe17 	ldw	r2,-8(fp)
    97a8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    97ac:	e037883a 	mov	sp,fp
    97b0:	dfc00117 	ldw	ra,4(sp)
    97b4:	df000017 	ldw	fp,0(sp)
    97b8:	dec00204 	addi	sp,sp,8
    97bc:	f800283a 	ret

000097c0 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    97c0:	defff804 	addi	sp,sp,-32
    97c4:	dfc00715 	stw	ra,28(sp)
    97c8:	df000615 	stw	fp,24(sp)
    97cc:	df000604 	addi	fp,sp,24
    97d0:	e13ffc15 	stw	r4,-16(fp)
    97d4:	e17ffd15 	stw	r5,-12(fp)
    97d8:	e1bffe15 	stw	r6,-8(fp)
    97dc:	e1ffff15 	stw	r7,-4(fp)
    97e0:	e0bfff17 	ldw	r2,-4(fp)
    97e4:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    97e8:	00800074 	movhi	r2,1
    97ec:	10ac6004 	addi	r2,r2,-20096
    97f0:	10800017 	ldw	r2,0(r2)
    97f4:	1000041e 	bne	r2,zero,9808 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
    97f8:	00800074 	movhi	r2,1
    97fc:	10ac6004 	addi	r2,r2,-20096
    9800:	e0fffb17 	ldw	r3,-20(fp)
    9804:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    9808:	e0bffc17 	ldw	r2,-16(fp)
    980c:	10800104 	addi	r2,r2,4
    9810:	00c001c4 	movi	r3,7
    9814:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
    9818:	d8000015 	stw	zero,0(sp)
    981c:	e13ffd17 	ldw	r4,-12(fp)
    9820:	e17ffe17 	ldw	r5,-8(fp)
    9824:	01800074 	movhi	r6,1
    9828:	31a5d304 	addi	r6,r6,-26804
    982c:	e1fffc17 	ldw	r7,-16(fp)
    9830:	0009c200 	call	9c20 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
    9834:	e037883a 	mov	sp,fp
    9838:	dfc00117 	ldw	ra,4(sp)
    983c:	df000017 	ldw	fp,0(sp)
    9840:	dec00204 	addi	sp,sp,8
    9844:	f800283a 	ret

00009848 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    9848:	defffa04 	addi	sp,sp,-24
    984c:	dfc00515 	stw	ra,20(sp)
    9850:	df000415 	stw	fp,16(sp)
    9854:	df000404 	addi	fp,sp,16
    9858:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
    985c:	008000c4 	movi	r2,3
    9860:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
    9864:	e13ffd17 	ldw	r4,-12(fp)
    9868:	014003f4 	movhi	r5,15
    986c:	29509004 	addi	r5,r5,16960
    9870:	000915c0 	call	915c <__mulsi3>
    9874:	0100bef4 	movhi	r4,763
    9878:	213c2004 	addi	r4,r4,-3968
    987c:	100b883a 	mov	r5,r2
    9880:	00086840 	call	8684 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    9884:	01200034 	movhi	r4,32768
    9888:	213fffc4 	addi	r4,r4,-1
    988c:	100b883a 	mov	r5,r2
    9890:	00086840 	call	8684 <__udivsi3>
    9894:	e13fff17 	ldw	r4,-4(fp)
    9898:	100b883a 	mov	r5,r2
    989c:	00086840 	call	8684 <__udivsi3>
    98a0:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    98a4:	e0bffe17 	ldw	r2,-8(fp)
    98a8:	10002926 	beq	r2,zero,9950 <alt_busy_sleep+0x108>
  {
    for(i=0;i<big_loops;i++)
    98ac:	e03ffc15 	stw	zero,-16(fp)
    98b0:	00001606 	br	990c <alt_busy_sleep+0xc4>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    98b4:	00a00034 	movhi	r2,32768
    98b8:	10bfffc4 	addi	r2,r2,-1
    98bc:	10bfffc4 	addi	r2,r2,-1
    98c0:	103ffe1e 	bne	r2,zero,98bc <_gp+0xffff6a64>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
    98c4:	e13ffd17 	ldw	r4,-12(fp)
    98c8:	014003f4 	movhi	r5,15
    98cc:	29509004 	addi	r5,r5,16960
    98d0:	000915c0 	call	915c <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    98d4:	0100bef4 	movhi	r4,763
    98d8:	213c2004 	addi	r4,r4,-3968
    98dc:	100b883a 	mov	r5,r2
    98e0:	00086840 	call	8684 <__udivsi3>
    98e4:	01200034 	movhi	r4,32768
    98e8:	213fffc4 	addi	r4,r4,-1
    98ec:	100b883a 	mov	r5,r2
    98f0:	00086840 	call	8684 <__udivsi3>
    98f4:	e0ffff17 	ldw	r3,-4(fp)
    98f8:	1885c83a 	sub	r2,r3,r2
    98fc:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    9900:	e0bffc17 	ldw	r2,-16(fp)
    9904:	10800044 	addi	r2,r2,1
    9908:	e0bffc15 	stw	r2,-16(fp)
    990c:	e0fffc17 	ldw	r3,-16(fp)
    9910:	e0bffe17 	ldw	r2,-8(fp)
    9914:	18bfe716 	blt	r3,r2,98b4 <_gp+0xffff6a5c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    9918:	e13ffd17 	ldw	r4,-12(fp)
    991c:	014003f4 	movhi	r5,15
    9920:	29509004 	addi	r5,r5,16960
    9924:	000915c0 	call	915c <__mulsi3>
    9928:	0100bef4 	movhi	r4,763
    992c:	213c2004 	addi	r4,r4,-3968
    9930:	100b883a 	mov	r5,r2
    9934:	00086840 	call	8684 <__udivsi3>
    9938:	1009883a 	mov	r4,r2
    993c:	e17fff17 	ldw	r5,-4(fp)
    9940:	000915c0 	call	915c <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    9944:	10bfffc4 	addi	r2,r2,-1
    9948:	103ffe1e 	bne	r2,zero,9944 <_gp+0xffff6aec>
    994c:	00000d06 	br	9984 <alt_busy_sleep+0x13c>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    9950:	e13ffd17 	ldw	r4,-12(fp)
    9954:	014003f4 	movhi	r5,15
    9958:	29509004 	addi	r5,r5,16960
    995c:	000915c0 	call	915c <__mulsi3>
    9960:	0100bef4 	movhi	r4,763
    9964:	213c2004 	addi	r4,r4,-3968
    9968:	100b883a 	mov	r5,r2
    996c:	00086840 	call	8684 <__udivsi3>
    9970:	1009883a 	mov	r4,r2
    9974:	e17fff17 	ldw	r5,-4(fp)
    9978:	000915c0 	call	915c <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    997c:	10bfffc4 	addi	r2,r2,-1
    9980:	00bffe16 	blt	zero,r2,997c <_gp+0xffff6b24>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
    9984:	0005883a 	mov	r2,zero
}
    9988:	e037883a 	mov	sp,fp
    998c:	dfc00117 	ldw	ra,4(sp)
    9990:	df000017 	ldw	fp,0(sp)
    9994:	dec00204 	addi	sp,sp,8
    9998:	f800283a 	ret

0000999c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    999c:	defffe04 	addi	sp,sp,-8
    99a0:	dfc00115 	stw	ra,4(sp)
    99a4:	df000015 	stw	fp,0(sp)
    99a8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    99ac:	00800074 	movhi	r2,1
    99b0:	10ab9d04 	addi	r2,r2,-20876
    99b4:	10800017 	ldw	r2,0(r2)
    99b8:	10000526 	beq	r2,zero,99d0 <alt_get_errno+0x34>
    99bc:	00800074 	movhi	r2,1
    99c0:	10ab9d04 	addi	r2,r2,-20876
    99c4:	10800017 	ldw	r2,0(r2)
    99c8:	103ee83a 	callr	r2
    99cc:	00000206 	br	99d8 <alt_get_errno+0x3c>
    99d0:	00800074 	movhi	r2,1
    99d4:	10ac5b04 	addi	r2,r2,-20116
}
    99d8:	e037883a 	mov	sp,fp
    99dc:	dfc00117 	ldw	ra,4(sp)
    99e0:	df000017 	ldw	fp,0(sp)
    99e4:	dec00204 	addi	sp,sp,8
    99e8:	f800283a 	ret

000099ec <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    99ec:	defffb04 	addi	sp,sp,-20
    99f0:	dfc00415 	stw	ra,16(sp)
    99f4:	df000315 	stw	fp,12(sp)
    99f8:	df000304 	addi	fp,sp,12
    99fc:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    9a00:	e0bfff17 	ldw	r2,-4(fp)
    9a04:	10000716 	blt	r2,zero,9a24 <close+0x38>
    9a08:	e13fff17 	ldw	r4,-4(fp)
    9a0c:	01400304 	movi	r5,12
    9a10:	000915c0 	call	915c <__mulsi3>
    9a14:	00c00074 	movhi	r3,1
    9a18:	18eb3604 	addi	r3,r3,-21288
    9a1c:	10c5883a 	add	r2,r2,r3
    9a20:	00000106 	br	9a28 <close+0x3c>
    9a24:	0005883a 	mov	r2,zero
    9a28:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    9a2c:	e0bffd17 	ldw	r2,-12(fp)
    9a30:	10001826 	beq	r2,zero,9a94 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    9a34:	e0bffd17 	ldw	r2,-12(fp)
    9a38:	10800017 	ldw	r2,0(r2)
    9a3c:	10800417 	ldw	r2,16(r2)
    9a40:	10000626 	beq	r2,zero,9a5c <close+0x70>
    9a44:	e0bffd17 	ldw	r2,-12(fp)
    9a48:	10800017 	ldw	r2,0(r2)
    9a4c:	10800417 	ldw	r2,16(r2)
    9a50:	e13ffd17 	ldw	r4,-12(fp)
    9a54:	103ee83a 	callr	r2
    9a58:	00000106 	br	9a60 <close+0x74>
    9a5c:	0005883a 	mov	r2,zero
    9a60:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    9a64:	e13fff17 	ldw	r4,-4(fp)
    9a68:	000a2d80 	call	a2d8 <alt_release_fd>
    if (rval < 0)
    9a6c:	e0bffe17 	ldw	r2,-8(fp)
    9a70:	1000060e 	bge	r2,zero,9a8c <close+0xa0>
    {
      ALT_ERRNO = -rval;
    9a74:	000999c0 	call	999c <alt_get_errno>
    9a78:	e0fffe17 	ldw	r3,-8(fp)
    9a7c:	00c7c83a 	sub	r3,zero,r3
    9a80:	10c00015 	stw	r3,0(r2)
      return -1;
    9a84:	00bfffc4 	movi	r2,-1
    9a88:	00000606 	br	9aa4 <close+0xb8>
    }
    return 0;
    9a8c:	0005883a 	mov	r2,zero
    9a90:	00000406 	br	9aa4 <close+0xb8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    9a94:	000999c0 	call	999c <alt_get_errno>
    9a98:	00c01444 	movi	r3,81
    9a9c:	10c00015 	stw	r3,0(r2)
    return -1;
    9aa0:	00bfffc4 	movi	r2,-1
  }
}
    9aa4:	e037883a 	mov	sp,fp
    9aa8:	dfc00117 	ldw	ra,4(sp)
    9aac:	df000017 	ldw	fp,0(sp)
    9ab0:	dec00204 	addi	sp,sp,8
    9ab4:	f800283a 	ret

00009ab8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    9ab8:	deffff04 	addi	sp,sp,-4
    9abc:	df000015 	stw	fp,0(sp)
    9ac0:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    9ac4:	e037883a 	mov	sp,fp
    9ac8:	df000017 	ldw	fp,0(sp)
    9acc:	dec00104 	addi	sp,sp,4
    9ad0:	f800283a 	ret

00009ad4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    9ad4:	defffc04 	addi	sp,sp,-16
    9ad8:	df000315 	stw	fp,12(sp)
    9adc:	df000304 	addi	fp,sp,12
    9ae0:	e13ffd15 	stw	r4,-12(fp)
    9ae4:	e17ffe15 	stw	r5,-8(fp)
    9ae8:	e1bfff15 	stw	r6,-4(fp)
  return len;
    9aec:	e0bfff17 	ldw	r2,-4(fp)
}
    9af0:	e037883a 	mov	sp,fp
    9af4:	df000017 	ldw	fp,0(sp)
    9af8:	dec00104 	addi	sp,sp,4
    9afc:	f800283a 	ret

00009b00 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    9b00:	defffe04 	addi	sp,sp,-8
    9b04:	dfc00115 	stw	ra,4(sp)
    9b08:	df000015 	stw	fp,0(sp)
    9b0c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    9b10:	00800074 	movhi	r2,1
    9b14:	10ab9d04 	addi	r2,r2,-20876
    9b18:	10800017 	ldw	r2,0(r2)
    9b1c:	10000526 	beq	r2,zero,9b34 <alt_get_errno+0x34>
    9b20:	00800074 	movhi	r2,1
    9b24:	10ab9d04 	addi	r2,r2,-20876
    9b28:	10800017 	ldw	r2,0(r2)
    9b2c:	103ee83a 	callr	r2
    9b30:	00000206 	br	9b3c <alt_get_errno+0x3c>
    9b34:	00800074 	movhi	r2,1
    9b38:	10ac5b04 	addi	r2,r2,-20116
}
    9b3c:	e037883a 	mov	sp,fp
    9b40:	dfc00117 	ldw	ra,4(sp)
    9b44:	df000017 	ldw	fp,0(sp)
    9b48:	dec00204 	addi	sp,sp,8
    9b4c:	f800283a 	ret

00009b50 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    9b50:	defffa04 	addi	sp,sp,-24
    9b54:	dfc00515 	stw	ra,20(sp)
    9b58:	df000415 	stw	fp,16(sp)
    9b5c:	df000404 	addi	fp,sp,16
    9b60:	e13ffe15 	stw	r4,-8(fp)
    9b64:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    9b68:	e0bffe17 	ldw	r2,-8(fp)
    9b6c:	10000326 	beq	r2,zero,9b7c <alt_dev_llist_insert+0x2c>
    9b70:	e0bffe17 	ldw	r2,-8(fp)
    9b74:	10800217 	ldw	r2,8(r2)
    9b78:	1000051e 	bne	r2,zero,9b90 <alt_dev_llist_insert+0x40>
  {
    ALT_ERRNO = EINVAL;
    9b7c:	0009b000 	call	9b00 <alt_get_errno>
    9b80:	00c00584 	movi	r3,22
    9b84:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
    9b88:	00bffa84 	movi	r2,-22
    9b8c:	00001306 	br	9bdc <alt_dev_llist_insert+0x8c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    9b90:	e0bffe17 	ldw	r2,-8(fp)
    9b94:	e0ffff17 	ldw	r3,-4(fp)
    9b98:	e0fffc15 	stw	r3,-16(fp)
    9b9c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    9ba0:	e0bffd17 	ldw	r2,-12(fp)
    9ba4:	e0fffc17 	ldw	r3,-16(fp)
    9ba8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    9bac:	e0bffc17 	ldw	r2,-16(fp)
    9bb0:	10c00017 	ldw	r3,0(r2)
    9bb4:	e0bffd17 	ldw	r2,-12(fp)
    9bb8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    9bbc:	e0bffc17 	ldw	r2,-16(fp)
    9bc0:	10800017 	ldw	r2,0(r2)
    9bc4:	e0fffd17 	ldw	r3,-12(fp)
    9bc8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    9bcc:	e0bffc17 	ldw	r2,-16(fp)
    9bd0:	e0fffd17 	ldw	r3,-12(fp)
    9bd4:	10c00015 	stw	r3,0(r2)

  return 0;  
    9bd8:	0005883a 	mov	r2,zero
}
    9bdc:	e037883a 	mov	sp,fp
    9be0:	dfc00117 	ldw	ra,4(sp)
    9be4:	df000017 	ldw	fp,0(sp)
    9be8:	dec00204 	addi	sp,sp,8
    9bec:	f800283a 	ret

00009bf0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    9bf0:	defffe04 	addi	sp,sp,-8
    9bf4:	dfc00115 	stw	ra,4(sp)
    9bf8:	df000015 	stw	fp,0(sp)
    9bfc:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    9c00:	0009883a 	mov	r4,zero
    9c04:	01420004 	movi	r5,2048
    9c08:	000a78c0 	call	a78c <alt_icache_flush>
#endif
}
    9c0c:	e037883a 	mov	sp,fp
    9c10:	dfc00117 	ldw	ra,4(sp)
    9c14:	df000017 	ldw	fp,0(sp)
    9c18:	dec00204 	addi	sp,sp,8
    9c1c:	f800283a 	ret

00009c20 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    9c20:	defff904 	addi	sp,sp,-28
    9c24:	dfc00615 	stw	ra,24(sp)
    9c28:	df000515 	stw	fp,20(sp)
    9c2c:	df000504 	addi	fp,sp,20
    9c30:	e13ffc15 	stw	r4,-16(fp)
    9c34:	e17ffd15 	stw	r5,-12(fp)
    9c38:	e1bffe15 	stw	r6,-8(fp)
    9c3c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    9c40:	e0800217 	ldw	r2,8(fp)
    9c44:	d8800015 	stw	r2,0(sp)
    9c48:	e13ffc17 	ldw	r4,-16(fp)
    9c4c:	e17ffd17 	ldw	r5,-12(fp)
    9c50:	e1bffe17 	ldw	r6,-8(fp)
    9c54:	e1ffff17 	ldw	r7,-4(fp)
    9c58:	0009df80 	call	9df8 <alt_iic_isr_register>
}  
    9c5c:	e037883a 	mov	sp,fp
    9c60:	dfc00117 	ldw	ra,4(sp)
    9c64:	df000017 	ldw	fp,0(sp)
    9c68:	dec00204 	addi	sp,sp,8
    9c6c:	f800283a 	ret

00009c70 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    9c70:	defff904 	addi	sp,sp,-28
    9c74:	df000615 	stw	fp,24(sp)
    9c78:	df000604 	addi	fp,sp,24
    9c7c:	e13ffe15 	stw	r4,-8(fp)
    9c80:	e17fff15 	stw	r5,-4(fp)
    9c84:	e0bfff17 	ldw	r2,-4(fp)
    9c88:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9c8c:	0005303a 	rdctl	r2,status
    9c90:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9c94:	e0fffb17 	ldw	r3,-20(fp)
    9c98:	00bfff84 	movi	r2,-2
    9c9c:	1884703a 	and	r2,r3,r2
    9ca0:	1001703a 	wrctl	status,r2
  
  return context;
    9ca4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    9ca8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
    9cac:	e0bffa17 	ldw	r2,-24(fp)
    9cb0:	00c00044 	movi	r3,1
    9cb4:	1884983a 	sll	r2,r3,r2
    9cb8:	1007883a 	mov	r3,r2
    9cbc:	00800074 	movhi	r2,1
    9cc0:	10ac5f04 	addi	r2,r2,-20100
    9cc4:	10800017 	ldw	r2,0(r2)
    9cc8:	1886b03a 	or	r3,r3,r2
    9ccc:	00800074 	movhi	r2,1
    9cd0:	10ac5f04 	addi	r2,r2,-20100
    9cd4:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    9cd8:	00800074 	movhi	r2,1
    9cdc:	10ac5f04 	addi	r2,r2,-20100
    9ce0:	10800017 	ldw	r2,0(r2)
    9ce4:	100170fa 	wrctl	ienable,r2
    9ce8:	e0bffc17 	ldw	r2,-16(fp)
    9cec:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9cf0:	e0bffd17 	ldw	r2,-12(fp)
    9cf4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    9cf8:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
    9cfc:	e037883a 	mov	sp,fp
    9d00:	df000017 	ldw	fp,0(sp)
    9d04:	dec00104 	addi	sp,sp,4
    9d08:	f800283a 	ret

00009d0c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    9d0c:	defff904 	addi	sp,sp,-28
    9d10:	df000615 	stw	fp,24(sp)
    9d14:	df000604 	addi	fp,sp,24
    9d18:	e13ffe15 	stw	r4,-8(fp)
    9d1c:	e17fff15 	stw	r5,-4(fp)
    9d20:	e0bfff17 	ldw	r2,-4(fp)
    9d24:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9d28:	0005303a 	rdctl	r2,status
    9d2c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9d30:	e0fffb17 	ldw	r3,-20(fp)
    9d34:	00bfff84 	movi	r2,-2
    9d38:	1884703a 	and	r2,r3,r2
    9d3c:	1001703a 	wrctl	status,r2
  
  return context;
    9d40:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    9d44:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
    9d48:	e0bffa17 	ldw	r2,-24(fp)
    9d4c:	00c00044 	movi	r3,1
    9d50:	1884983a 	sll	r2,r3,r2
    9d54:	0084303a 	nor	r2,zero,r2
    9d58:	1007883a 	mov	r3,r2
    9d5c:	00800074 	movhi	r2,1
    9d60:	10ac5f04 	addi	r2,r2,-20100
    9d64:	10800017 	ldw	r2,0(r2)
    9d68:	1886703a 	and	r3,r3,r2
    9d6c:	00800074 	movhi	r2,1
    9d70:	10ac5f04 	addi	r2,r2,-20100
    9d74:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    9d78:	00800074 	movhi	r2,1
    9d7c:	10ac5f04 	addi	r2,r2,-20100
    9d80:	10800017 	ldw	r2,0(r2)
    9d84:	100170fa 	wrctl	ienable,r2
    9d88:	e0bffc17 	ldw	r2,-16(fp)
    9d8c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9d90:	e0bffd17 	ldw	r2,-12(fp)
    9d94:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    9d98:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
    9d9c:	e037883a 	mov	sp,fp
    9da0:	df000017 	ldw	fp,0(sp)
    9da4:	dec00104 	addi	sp,sp,4
    9da8:	f800283a 	ret

00009dac <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    9dac:	defffc04 	addi	sp,sp,-16
    9db0:	df000315 	stw	fp,12(sp)
    9db4:	df000304 	addi	fp,sp,12
    9db8:	e13ffe15 	stw	r4,-8(fp)
    9dbc:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    9dc0:	000530fa 	rdctl	r2,ienable
    9dc4:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    9dc8:	e0bfff17 	ldw	r2,-4(fp)
    9dcc:	00c00044 	movi	r3,1
    9dd0:	1884983a 	sll	r2,r3,r2
    9dd4:	1007883a 	mov	r3,r2
    9dd8:	e0bffd17 	ldw	r2,-12(fp)
    9ddc:	1884703a 	and	r2,r3,r2
    9de0:	1004c03a 	cmpne	r2,r2,zero
    9de4:	10803fcc 	andi	r2,r2,255
}
    9de8:	e037883a 	mov	sp,fp
    9dec:	df000017 	ldw	fp,0(sp)
    9df0:	dec00104 	addi	sp,sp,4
    9df4:	f800283a 	ret

00009df8 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    9df8:	defff504 	addi	sp,sp,-44
    9dfc:	dfc00a15 	stw	ra,40(sp)
    9e00:	df000915 	stw	fp,36(sp)
    9e04:	df000904 	addi	fp,sp,36
    9e08:	e13ffc15 	stw	r4,-16(fp)
    9e0c:	e17ffd15 	stw	r5,-12(fp)
    9e10:	e1bffe15 	stw	r6,-8(fp)
    9e14:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
    9e18:	00bffa84 	movi	r2,-22
    9e1c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    9e20:	e0bffd17 	ldw	r2,-12(fp)
    9e24:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    9e28:	e0bff817 	ldw	r2,-32(fp)
    9e2c:	10800808 	cmpgei	r2,r2,32
    9e30:	1000271e 	bne	r2,zero,9ed0 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9e34:	0005303a 	rdctl	r2,status
    9e38:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9e3c:	e0fffa17 	ldw	r3,-24(fp)
    9e40:	00bfff84 	movi	r2,-2
    9e44:	1884703a 	and	r2,r3,r2
    9e48:	1001703a 	wrctl	status,r2
  
  return context;
    9e4c:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    9e50:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
    9e54:	00c00074 	movhi	r3,1
    9e58:	18ec6204 	addi	r3,r3,-20088
    9e5c:	e0bff817 	ldw	r2,-32(fp)
    9e60:	100490fa 	slli	r2,r2,3
    9e64:	1885883a 	add	r2,r3,r2
    9e68:	e0fffe17 	ldw	r3,-8(fp)
    9e6c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
    9e70:	00c00074 	movhi	r3,1
    9e74:	18ec6204 	addi	r3,r3,-20088
    9e78:	e0bff817 	ldw	r2,-32(fp)
    9e7c:	100490fa 	slli	r2,r2,3
    9e80:	1885883a 	add	r2,r3,r2
    9e84:	10800104 	addi	r2,r2,4
    9e88:	e0ffff17 	ldw	r3,-4(fp)
    9e8c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    9e90:	e0bffe17 	ldw	r2,-8(fp)
    9e94:	10000526 	beq	r2,zero,9eac <alt_iic_isr_register+0xb4>
    9e98:	e0bff817 	ldw	r2,-32(fp)
    9e9c:	e13ffc17 	ldw	r4,-16(fp)
    9ea0:	100b883a 	mov	r5,r2
    9ea4:	0009c700 	call	9c70 <alt_ic_irq_enable>
    9ea8:	00000406 	br	9ebc <alt_iic_isr_register+0xc4>
    9eac:	e0bff817 	ldw	r2,-32(fp)
    9eb0:	e13ffc17 	ldw	r4,-16(fp)
    9eb4:	100b883a 	mov	r5,r2
    9eb8:	0009d0c0 	call	9d0c <alt_ic_irq_disable>
    9ebc:	e0bff715 	stw	r2,-36(fp)
    9ec0:	e0bff917 	ldw	r2,-28(fp)
    9ec4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9ec8:	e0bffb17 	ldw	r2,-20(fp)
    9ecc:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    9ed0:	e0bff717 	ldw	r2,-36(fp)
}
    9ed4:	e037883a 	mov	sp,fp
    9ed8:	dfc00117 	ldw	ra,4(sp)
    9edc:	df000017 	ldw	fp,0(sp)
    9ee0:	dec00204 	addi	sp,sp,8
    9ee4:	f800283a 	ret

00009ee8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    9ee8:	defff804 	addi	sp,sp,-32
    9eec:	dfc00715 	stw	ra,28(sp)
    9ef0:	df000615 	stw	fp,24(sp)
    9ef4:	dc000515 	stw	r16,20(sp)
    9ef8:	df000504 	addi	fp,sp,20
    9efc:	e13ffc15 	stw	r4,-16(fp)
    9f00:	e17ffd15 	stw	r5,-12(fp)
    9f04:	e1bffe15 	stw	r6,-8(fp)
    9f08:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    9f0c:	e13ffd17 	ldw	r4,-12(fp)
    9f10:	e17ffe17 	ldw	r5,-8(fp)
    9f14:	e1bfff17 	ldw	r6,-4(fp)
    9f18:	000a1800 	call	a180 <open>
    9f1c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    9f20:	e0bffb17 	ldw	r2,-20(fp)
    9f24:	10002216 	blt	r2,zero,9fb0 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
    9f28:	04000074 	movhi	r16,1
    9f2c:	842b3604 	addi	r16,r16,-21288
    9f30:	e0bffb17 	ldw	r2,-20(fp)
    9f34:	1009883a 	mov	r4,r2
    9f38:	01400304 	movi	r5,12
    9f3c:	000915c0 	call	915c <__mulsi3>
    9f40:	8085883a 	add	r2,r16,r2
    9f44:	10c00017 	ldw	r3,0(r2)
    9f48:	e0bffc17 	ldw	r2,-16(fp)
    9f4c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    9f50:	04000074 	movhi	r16,1
    9f54:	842b3604 	addi	r16,r16,-21288
    9f58:	e0bffb17 	ldw	r2,-20(fp)
    9f5c:	1009883a 	mov	r4,r2
    9f60:	01400304 	movi	r5,12
    9f64:	000915c0 	call	915c <__mulsi3>
    9f68:	8085883a 	add	r2,r16,r2
    9f6c:	10800104 	addi	r2,r2,4
    9f70:	10c00017 	ldw	r3,0(r2)
    9f74:	e0bffc17 	ldw	r2,-16(fp)
    9f78:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    9f7c:	04000074 	movhi	r16,1
    9f80:	842b3604 	addi	r16,r16,-21288
    9f84:	e0bffb17 	ldw	r2,-20(fp)
    9f88:	1009883a 	mov	r4,r2
    9f8c:	01400304 	movi	r5,12
    9f90:	000915c0 	call	915c <__mulsi3>
    9f94:	8085883a 	add	r2,r16,r2
    9f98:	10800204 	addi	r2,r2,8
    9f9c:	10c00017 	ldw	r3,0(r2)
    9fa0:	e0bffc17 	ldw	r2,-16(fp)
    9fa4:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    9fa8:	e13ffb17 	ldw	r4,-20(fp)
    9fac:	000a2d80 	call	a2d8 <alt_release_fd>
  }
} 
    9fb0:	e037883a 	mov	sp,fp
    9fb4:	dfc00217 	ldw	ra,8(sp)
    9fb8:	df000117 	ldw	fp,4(sp)
    9fbc:	dc000017 	ldw	r16,0(sp)
    9fc0:	dec00304 	addi	sp,sp,12
    9fc4:	f800283a 	ret

00009fc8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    9fc8:	defffb04 	addi	sp,sp,-20
    9fcc:	dfc00415 	stw	ra,16(sp)
    9fd0:	df000315 	stw	fp,12(sp)
    9fd4:	df000304 	addi	fp,sp,12
    9fd8:	e13ffd15 	stw	r4,-12(fp)
    9fdc:	e17ffe15 	stw	r5,-8(fp)
    9fe0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    9fe4:	01000074 	movhi	r4,1
    9fe8:	212b3904 	addi	r4,r4,-21276
    9fec:	e17ffd17 	ldw	r5,-12(fp)
    9ff0:	01800044 	movi	r6,1
    9ff4:	01c07fc4 	movi	r7,511
    9ff8:	0009ee80 	call	9ee8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    9ffc:	01000074 	movhi	r4,1
    a000:	212b3604 	addi	r4,r4,-21288
    a004:	e17ffe17 	ldw	r5,-8(fp)
    a008:	000d883a 	mov	r6,zero
    a00c:	01c07fc4 	movi	r7,511
    a010:	0009ee80 	call	9ee8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    a014:	01000074 	movhi	r4,1
    a018:	212b3c04 	addi	r4,r4,-21264
    a01c:	e17fff17 	ldw	r5,-4(fp)
    a020:	01800044 	movi	r6,1
    a024:	01c07fc4 	movi	r7,511
    a028:	0009ee80 	call	9ee8 <alt_open_fd>
}  
    a02c:	e037883a 	mov	sp,fp
    a030:	dfc00117 	ldw	ra,4(sp)
    a034:	df000017 	ldw	fp,0(sp)
    a038:	dec00204 	addi	sp,sp,8
    a03c:	f800283a 	ret

0000a040 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    a040:	defffe04 	addi	sp,sp,-8
    a044:	dfc00115 	stw	ra,4(sp)
    a048:	df000015 	stw	fp,0(sp)
    a04c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    a050:	00800074 	movhi	r2,1
    a054:	10ab9d04 	addi	r2,r2,-20876
    a058:	10800017 	ldw	r2,0(r2)
    a05c:	10000526 	beq	r2,zero,a074 <alt_get_errno+0x34>
    a060:	00800074 	movhi	r2,1
    a064:	10ab9d04 	addi	r2,r2,-20876
    a068:	10800017 	ldw	r2,0(r2)
    a06c:	103ee83a 	callr	r2
    a070:	00000206 	br	a07c <alt_get_errno+0x3c>
    a074:	00800074 	movhi	r2,1
    a078:	10ac5b04 	addi	r2,r2,-20116
}
    a07c:	e037883a 	mov	sp,fp
    a080:	dfc00117 	ldw	ra,4(sp)
    a084:	df000017 	ldw	fp,0(sp)
    a088:	dec00204 	addi	sp,sp,8
    a08c:	f800283a 	ret

0000a090 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    a090:	defffb04 	addi	sp,sp,-20
    a094:	dfc00415 	stw	ra,16(sp)
    a098:	df000315 	stw	fp,12(sp)
    a09c:	dc000215 	stw	r16,8(sp)
    a0a0:	df000204 	addi	fp,sp,8
    a0a4:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    a0a8:	e0bfff17 	ldw	r2,-4(fp)
    a0ac:	10800217 	ldw	r2,8(r2)
    a0b0:	10d00034 	orhi	r3,r2,16384
    a0b4:	e0bfff17 	ldw	r2,-4(fp)
    a0b8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    a0bc:	e03ffe15 	stw	zero,-8(fp)
    a0c0:	00002206 	br	a14c <alt_file_locked+0xbc>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    a0c4:	04000074 	movhi	r16,1
    a0c8:	842b3604 	addi	r16,r16,-21288
    a0cc:	e0bffe17 	ldw	r2,-8(fp)
    a0d0:	1009883a 	mov	r4,r2
    a0d4:	01400304 	movi	r5,12
    a0d8:	000915c0 	call	915c <__mulsi3>
    a0dc:	8085883a 	add	r2,r16,r2
    a0e0:	10c00017 	ldw	r3,0(r2)
    a0e4:	e0bfff17 	ldw	r2,-4(fp)
    a0e8:	10800017 	ldw	r2,0(r2)
    a0ec:	1880141e 	bne	r3,r2,a140 <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    a0f0:	04000074 	movhi	r16,1
    a0f4:	842b3604 	addi	r16,r16,-21288
    a0f8:	e0bffe17 	ldw	r2,-8(fp)
    a0fc:	1009883a 	mov	r4,r2
    a100:	01400304 	movi	r5,12
    a104:	000915c0 	call	915c <__mulsi3>
    a108:	8085883a 	add	r2,r16,r2
    a10c:	10800204 	addi	r2,r2,8
    a110:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    a114:	10000a0e 	bge	r2,zero,a140 <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    a118:	e13ffe17 	ldw	r4,-8(fp)
    a11c:	01400304 	movi	r5,12
    a120:	000915c0 	call	915c <__mulsi3>
    a124:	00c00074 	movhi	r3,1
    a128:	18eb3604 	addi	r3,r3,-21288
    a12c:	10c7883a 	add	r3,r2,r3
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    a130:	e0bfff17 	ldw	r2,-4(fp)
    a134:	18800226 	beq	r3,r2,a140 <alt_file_locked+0xb0>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    a138:	00bffcc4 	movi	r2,-13
    a13c:	00000a06 	br	a168 <alt_file_locked+0xd8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    a140:	e0bffe17 	ldw	r2,-8(fp)
    a144:	10800044 	addi	r2,r2,1
    a148:	e0bffe15 	stw	r2,-8(fp)
    a14c:	00800074 	movhi	r2,1
    a150:	10ab9c04 	addi	r2,r2,-20880
    a154:	10800017 	ldw	r2,0(r2)
    a158:	1007883a 	mov	r3,r2
    a15c:	e0bffe17 	ldw	r2,-8(fp)
    a160:	18bfd82e 	bgeu	r3,r2,a0c4 <_gp+0xffff726c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    a164:	0005883a 	mov	r2,zero
}
    a168:	e037883a 	mov	sp,fp
    a16c:	dfc00217 	ldw	ra,8(sp)
    a170:	df000117 	ldw	fp,4(sp)
    a174:	dc000017 	ldw	r16,0(sp)
    a178:	dec00304 	addi	sp,sp,12
    a17c:	f800283a 	ret

0000a180 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    a180:	defff604 	addi	sp,sp,-40
    a184:	dfc00915 	stw	ra,36(sp)
    a188:	df000815 	stw	fp,32(sp)
    a18c:	df000804 	addi	fp,sp,32
    a190:	e13ffd15 	stw	r4,-12(fp)
    a194:	e17ffe15 	stw	r5,-8(fp)
    a198:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    a19c:	00bfffc4 	movi	r2,-1
    a1a0:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    a1a4:	00bffb44 	movi	r2,-19
    a1a8:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    a1ac:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    a1b0:	e13ffd17 	ldw	r4,-12(fp)
    a1b4:	01400074 	movhi	r5,1
    a1b8:	296b9a04 	addi	r5,r5,-20888
    a1bc:	000a5140 	call	a514 <alt_find_dev>
    a1c0:	e0bff815 	stw	r2,-32(fp)
    a1c4:	e0bff817 	ldw	r2,-32(fp)
    a1c8:	1000051e 	bne	r2,zero,a1e0 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    a1cc:	e13ffd17 	ldw	r4,-12(fp)
    a1d0:	000a5a40 	call	a5a4 <alt_find_file>
    a1d4:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    a1d8:	00800044 	movi	r2,1
    a1dc:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    a1e0:	e0bff817 	ldw	r2,-32(fp)
    a1e4:	10002a26 	beq	r2,zero,a290 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
    a1e8:	e13ff817 	ldw	r4,-32(fp)
    a1ec:	000a6b80 	call	a6b8 <alt_get_fd>
    a1f0:	e0bff915 	stw	r2,-28(fp)
    a1f4:	e0bff917 	ldw	r2,-28(fp)
    a1f8:	1000030e 	bge	r2,zero,a208 <open+0x88>
    {
      status = index;
    a1fc:	e0bff917 	ldw	r2,-28(fp)
    a200:	e0bffa15 	stw	r2,-24(fp)
    a204:	00002406 	br	a298 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
    a208:	e13ff917 	ldw	r4,-28(fp)
    a20c:	01400304 	movi	r5,12
    a210:	000915c0 	call	915c <__mulsi3>
    a214:	00c00074 	movhi	r3,1
    a218:	18eb3604 	addi	r3,r3,-21288
    a21c:	10c5883a 	add	r2,r2,r3
    a220:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    a224:	e0fffe17 	ldw	r3,-8(fp)
    a228:	00900034 	movhi	r2,16384
    a22c:	10bfffc4 	addi	r2,r2,-1
    a230:	1886703a 	and	r3,r3,r2
    a234:	e0bffc17 	ldw	r2,-16(fp)
    a238:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    a23c:	e0bffb17 	ldw	r2,-20(fp)
    a240:	1000051e 	bne	r2,zero,a258 <open+0xd8>
    a244:	e13ffc17 	ldw	r4,-16(fp)
    a248:	000a0900 	call	a090 <alt_file_locked>
    a24c:	e0bffa15 	stw	r2,-24(fp)
    a250:	e0bffa17 	ldw	r2,-24(fp)
    a254:	10001016 	blt	r2,zero,a298 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    a258:	e0bff817 	ldw	r2,-32(fp)
    a25c:	10800317 	ldw	r2,12(r2)
    a260:	10000826 	beq	r2,zero,a284 <open+0x104>
    a264:	e0bff817 	ldw	r2,-32(fp)
    a268:	10800317 	ldw	r2,12(r2)
    a26c:	e13ffc17 	ldw	r4,-16(fp)
    a270:	e17ffd17 	ldw	r5,-12(fp)
    a274:	e1bffe17 	ldw	r6,-8(fp)
    a278:	e1ffff17 	ldw	r7,-4(fp)
    a27c:	103ee83a 	callr	r2
    a280:	00000106 	br	a288 <open+0x108>
    a284:	0005883a 	mov	r2,zero
    a288:	e0bffa15 	stw	r2,-24(fp)
    a28c:	00000206 	br	a298 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
    a290:	00bffb44 	movi	r2,-19
    a294:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    a298:	e0bffa17 	ldw	r2,-24(fp)
    a29c:	1000080e 	bge	r2,zero,a2c0 <open+0x140>
  {
    alt_release_fd (index);  
    a2a0:	e13ff917 	ldw	r4,-28(fp)
    a2a4:	000a2d80 	call	a2d8 <alt_release_fd>
    ALT_ERRNO = -status;
    a2a8:	000a0400 	call	a040 <alt_get_errno>
    a2ac:	e0fffa17 	ldw	r3,-24(fp)
    a2b0:	00c7c83a 	sub	r3,zero,r3
    a2b4:	10c00015 	stw	r3,0(r2)
    return -1;
    a2b8:	00bfffc4 	movi	r2,-1
    a2bc:	00000106 	br	a2c4 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
    a2c0:	e0bff917 	ldw	r2,-28(fp)
}
    a2c4:	e037883a 	mov	sp,fp
    a2c8:	dfc00117 	ldw	ra,4(sp)
    a2cc:	df000017 	ldw	fp,0(sp)
    a2d0:	dec00204 	addi	sp,sp,8
    a2d4:	f800283a 	ret

0000a2d8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    a2d8:	defffc04 	addi	sp,sp,-16
    a2dc:	dfc00315 	stw	ra,12(sp)
    a2e0:	df000215 	stw	fp,8(sp)
    a2e4:	dc000115 	stw	r16,4(sp)
    a2e8:	df000104 	addi	fp,sp,4
    a2ec:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    a2f0:	e0bfff17 	ldw	r2,-4(fp)
    a2f4:	108000d0 	cmplti	r2,r2,3
    a2f8:	1000111e 	bne	r2,zero,a340 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
    a2fc:	04000074 	movhi	r16,1
    a300:	842b3604 	addi	r16,r16,-21288
    a304:	e0bfff17 	ldw	r2,-4(fp)
    a308:	1009883a 	mov	r4,r2
    a30c:	01400304 	movi	r5,12
    a310:	000915c0 	call	915c <__mulsi3>
    a314:	8085883a 	add	r2,r16,r2
    a318:	10800204 	addi	r2,r2,8
    a31c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    a320:	04000074 	movhi	r16,1
    a324:	842b3604 	addi	r16,r16,-21288
    a328:	e0bfff17 	ldw	r2,-4(fp)
    a32c:	1009883a 	mov	r4,r2
    a330:	01400304 	movi	r5,12
    a334:	000915c0 	call	915c <__mulsi3>
    a338:	8085883a 	add	r2,r16,r2
    a33c:	10000015 	stw	zero,0(r2)
  }
}
    a340:	e037883a 	mov	sp,fp
    a344:	dfc00217 	ldw	ra,8(sp)
    a348:	df000117 	ldw	fp,4(sp)
    a34c:	dc000017 	ldw	r16,0(sp)
    a350:	dec00304 	addi	sp,sp,12
    a354:	f800283a 	ret

0000a358 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    a358:	defffa04 	addi	sp,sp,-24
    a35c:	df000515 	stw	fp,20(sp)
    a360:	df000504 	addi	fp,sp,20
    a364:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a368:	0005303a 	rdctl	r2,status
    a36c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a370:	e0fffc17 	ldw	r3,-16(fp)
    a374:	00bfff84 	movi	r2,-2
    a378:	1884703a 	and	r2,r3,r2
    a37c:	1001703a 	wrctl	status,r2
  
  return context;
    a380:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    a384:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
    a388:	e0bfff17 	ldw	r2,-4(fp)
    a38c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    a390:	e0bffd17 	ldw	r2,-12(fp)
    a394:	10800017 	ldw	r2,0(r2)
    a398:	e0fffd17 	ldw	r3,-12(fp)
    a39c:	18c00117 	ldw	r3,4(r3)
    a3a0:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
    a3a4:	e0bffd17 	ldw	r2,-12(fp)
    a3a8:	10800117 	ldw	r2,4(r2)
    a3ac:	e0fffd17 	ldw	r3,-12(fp)
    a3b0:	18c00017 	ldw	r3,0(r3)
    a3b4:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    a3b8:	e0bffd17 	ldw	r2,-12(fp)
    a3bc:	e0fffd17 	ldw	r3,-12(fp)
    a3c0:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
    a3c4:	e0bffd17 	ldw	r2,-12(fp)
    a3c8:	e0fffd17 	ldw	r3,-12(fp)
    a3cc:	10c00015 	stw	r3,0(r2)
    a3d0:	e0bffb17 	ldw	r2,-20(fp)
    a3d4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a3d8:	e0bffe17 	ldw	r2,-8(fp)
    a3dc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    a3e0:	e037883a 	mov	sp,fp
    a3e4:	df000017 	ldw	fp,0(sp)
    a3e8:	dec00104 	addi	sp,sp,4
    a3ec:	f800283a 	ret

0000a3f0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    a3f0:	defffb04 	addi	sp,sp,-20
    a3f4:	dfc00415 	stw	ra,16(sp)
    a3f8:	df000315 	stw	fp,12(sp)
    a3fc:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    a400:	d0a00917 	ldw	r2,-32732(gp)
    a404:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    a408:	d0a0cb17 	ldw	r2,-31956(gp)
    a40c:	10800044 	addi	r2,r2,1
    a410:	d0a0cb15 	stw	r2,-31956(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    a414:	00002e06 	br	a4d0 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
    a418:	e0bffd17 	ldw	r2,-12(fp)
    a41c:	10800017 	ldw	r2,0(r2)
    a420:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    a424:	e0bffd17 	ldw	r2,-12(fp)
    a428:	10800403 	ldbu	r2,16(r2)
    a42c:	10803fcc 	andi	r2,r2,255
    a430:	10000426 	beq	r2,zero,a444 <alt_tick+0x54>
    a434:	d0a0cb17 	ldw	r2,-31956(gp)
    a438:	1000021e 	bne	r2,zero,a444 <alt_tick+0x54>
    {
      alarm->rollover = 0;
    a43c:	e0bffd17 	ldw	r2,-12(fp)
    a440:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    a444:	e0bffd17 	ldw	r2,-12(fp)
    a448:	10800217 	ldw	r2,8(r2)
    a44c:	d0e0cb17 	ldw	r3,-31956(gp)
    a450:	18801d36 	bltu	r3,r2,a4c8 <alt_tick+0xd8>
    a454:	e0bffd17 	ldw	r2,-12(fp)
    a458:	10800403 	ldbu	r2,16(r2)
    a45c:	10803fcc 	andi	r2,r2,255
    a460:	1000191e 	bne	r2,zero,a4c8 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
    a464:	e0bffd17 	ldw	r2,-12(fp)
    a468:	10c00317 	ldw	r3,12(r2)
    a46c:	e0bffd17 	ldw	r2,-12(fp)
    a470:	10800517 	ldw	r2,20(r2)
    a474:	1009883a 	mov	r4,r2
    a478:	183ee83a 	callr	r3
    a47c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    a480:	e0bfff17 	ldw	r2,-4(fp)
    a484:	1000031e 	bne	r2,zero,a494 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
    a488:	e13ffd17 	ldw	r4,-12(fp)
    a48c:	000a3580 	call	a358 <alt_alarm_stop>
    a490:	00000d06 	br	a4c8 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
    a494:	e0bffd17 	ldw	r2,-12(fp)
    a498:	10c00217 	ldw	r3,8(r2)
    a49c:	e0bfff17 	ldw	r2,-4(fp)
    a4a0:	1887883a 	add	r3,r3,r2
    a4a4:	e0bffd17 	ldw	r2,-12(fp)
    a4a8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    a4ac:	e0bffd17 	ldw	r2,-12(fp)
    a4b0:	10c00217 	ldw	r3,8(r2)
    a4b4:	d0a0cb17 	ldw	r2,-31956(gp)
    a4b8:	1880032e 	bgeu	r3,r2,a4c8 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
    a4bc:	e0bffd17 	ldw	r2,-12(fp)
    a4c0:	00c00044 	movi	r3,1
    a4c4:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
    a4c8:	e0bffe17 	ldw	r2,-8(fp)
    a4cc:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    a4d0:	e0fffd17 	ldw	r3,-12(fp)
    a4d4:	d0a00904 	addi	r2,gp,-32732
    a4d8:	18bfcf1e 	bne	r3,r2,a418 <_gp+0xffff75c0>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
    a4dc:	0001883a 	nop
}
    a4e0:	e037883a 	mov	sp,fp
    a4e4:	dfc00117 	ldw	ra,4(sp)
    a4e8:	df000017 	ldw	fp,0(sp)
    a4ec:	dec00204 	addi	sp,sp,8
    a4f0:	f800283a 	ret

0000a4f4 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    a4f4:	deffff04 	addi	sp,sp,-4
    a4f8:	df000015 	stw	fp,0(sp)
    a4fc:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    a500:	000170fa 	wrctl	ienable,zero
}
    a504:	e037883a 	mov	sp,fp
    a508:	df000017 	ldw	fp,0(sp)
    a50c:	dec00104 	addi	sp,sp,4
    a510:	f800283a 	ret

0000a514 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    a514:	defffa04 	addi	sp,sp,-24
    a518:	dfc00515 	stw	ra,20(sp)
    a51c:	df000415 	stw	fp,16(sp)
    a520:	df000404 	addi	fp,sp,16
    a524:	e13ffe15 	stw	r4,-8(fp)
    a528:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    a52c:	e0bfff17 	ldw	r2,-4(fp)
    a530:	10800017 	ldw	r2,0(r2)
    a534:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    a538:	e13ffe17 	ldw	r4,-8(fp)
    a53c:	00087d40 	call	87d4 <strlen>
    a540:	10800044 	addi	r2,r2,1
    a544:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    a548:	00000d06 	br	a580 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    a54c:	e0bffc17 	ldw	r2,-16(fp)
    a550:	10c00217 	ldw	r3,8(r2)
    a554:	e0bffd17 	ldw	r2,-12(fp)
    a558:	1809883a 	mov	r4,r3
    a55c:	e17ffe17 	ldw	r5,-8(fp)
    a560:	100d883a 	mov	r6,r2
    a564:	000a8380 	call	a838 <memcmp>
    a568:	1000021e 	bne	r2,zero,a574 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    a56c:	e0bffc17 	ldw	r2,-16(fp)
    a570:	00000706 	br	a590 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    a574:	e0bffc17 	ldw	r2,-16(fp)
    a578:	10800017 	ldw	r2,0(r2)
    a57c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    a580:	e0fffc17 	ldw	r3,-16(fp)
    a584:	e0bfff17 	ldw	r2,-4(fp)
    a588:	18bff01e 	bne	r3,r2,a54c <_gp+0xffff76f4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    a58c:	0005883a 	mov	r2,zero
}
    a590:	e037883a 	mov	sp,fp
    a594:	dfc00117 	ldw	ra,4(sp)
    a598:	df000017 	ldw	fp,0(sp)
    a59c:	dec00204 	addi	sp,sp,8
    a5a0:	f800283a 	ret

0000a5a4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    a5a4:	defffb04 	addi	sp,sp,-20
    a5a8:	dfc00415 	stw	ra,16(sp)
    a5ac:	df000315 	stw	fp,12(sp)
    a5b0:	df000304 	addi	fp,sp,12
    a5b4:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    a5b8:	00800074 	movhi	r2,1
    a5bc:	10ab9804 	addi	r2,r2,-20896
    a5c0:	10800017 	ldw	r2,0(r2)
    a5c4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    a5c8:	00003106 	br	a690 <alt_find_file+0xec>
  {
    len = strlen(next->name);
    a5cc:	e0bffd17 	ldw	r2,-12(fp)
    a5d0:	10800217 	ldw	r2,8(r2)
    a5d4:	1009883a 	mov	r4,r2
    a5d8:	00087d40 	call	87d4 <strlen>
    a5dc:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    a5e0:	e0bffd17 	ldw	r2,-12(fp)
    a5e4:	10c00217 	ldw	r3,8(r2)
    a5e8:	e0bffe17 	ldw	r2,-8(fp)
    a5ec:	10bfffc4 	addi	r2,r2,-1
    a5f0:	1885883a 	add	r2,r3,r2
    a5f4:	10800003 	ldbu	r2,0(r2)
    a5f8:	10803fcc 	andi	r2,r2,255
    a5fc:	1080201c 	xori	r2,r2,128
    a600:	10bfe004 	addi	r2,r2,-128
    a604:	10800bd8 	cmpnei	r2,r2,47
    a608:	1000031e 	bne	r2,zero,a618 <alt_find_file+0x74>
    {
      len -= 1;
    a60c:	e0bffe17 	ldw	r2,-8(fp)
    a610:	10bfffc4 	addi	r2,r2,-1
    a614:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    a618:	e0bffe17 	ldw	r2,-8(fp)
    a61c:	e0ffff17 	ldw	r3,-4(fp)
    a620:	1885883a 	add	r2,r3,r2
    a624:	10800003 	ldbu	r2,0(r2)
    a628:	10803fcc 	andi	r2,r2,255
    a62c:	1080201c 	xori	r2,r2,128
    a630:	10bfe004 	addi	r2,r2,-128
    a634:	10800be0 	cmpeqi	r2,r2,47
    a638:	1000081e 	bne	r2,zero,a65c <alt_find_file+0xb8>
    a63c:	e0bffe17 	ldw	r2,-8(fp)
    a640:	e0ffff17 	ldw	r3,-4(fp)
    a644:	1885883a 	add	r2,r3,r2
    a648:	10800003 	ldbu	r2,0(r2)
    a64c:	10803fcc 	andi	r2,r2,255
    a650:	1080201c 	xori	r2,r2,128
    a654:	10bfe004 	addi	r2,r2,-128
    a658:	10000a1e 	bne	r2,zero,a684 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    a65c:	e0bffd17 	ldw	r2,-12(fp)
    a660:	10c00217 	ldw	r3,8(r2)
    a664:	e0bffe17 	ldw	r2,-8(fp)
    a668:	1809883a 	mov	r4,r3
    a66c:	e17fff17 	ldw	r5,-4(fp)
    a670:	100d883a 	mov	r6,r2
    a674:	000a8380 	call	a838 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    a678:	1000021e 	bne	r2,zero,a684 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    a67c:	e0bffd17 	ldw	r2,-12(fp)
    a680:	00000806 	br	a6a4 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
    a684:	e0bffd17 	ldw	r2,-12(fp)
    a688:	10800017 	ldw	r2,0(r2)
    a68c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    a690:	e0fffd17 	ldw	r3,-12(fp)
    a694:	00800074 	movhi	r2,1
    a698:	10ab9804 	addi	r2,r2,-20896
    a69c:	18bfcb1e 	bne	r3,r2,a5cc <_gp+0xffff7774>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    a6a0:	0005883a 	mov	r2,zero
}
    a6a4:	e037883a 	mov	sp,fp
    a6a8:	dfc00117 	ldw	ra,4(sp)
    a6ac:	df000017 	ldw	fp,0(sp)
    a6b0:	dec00204 	addi	sp,sp,8
    a6b4:	f800283a 	ret

0000a6b8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    a6b8:	defffa04 	addi	sp,sp,-24
    a6bc:	dfc00515 	stw	ra,20(sp)
    a6c0:	df000415 	stw	fp,16(sp)
    a6c4:	dc000315 	stw	r16,12(sp)
    a6c8:	df000304 	addi	fp,sp,12
    a6cc:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    a6d0:	00bffa04 	movi	r2,-24
    a6d4:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    a6d8:	e03ffd15 	stw	zero,-12(fp)
    a6dc:	00002106 	br	a764 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
    a6e0:	04000074 	movhi	r16,1
    a6e4:	842b3604 	addi	r16,r16,-21288
    a6e8:	e0bffd17 	ldw	r2,-12(fp)
    a6ec:	1009883a 	mov	r4,r2
    a6f0:	01400304 	movi	r5,12
    a6f4:	000915c0 	call	915c <__mulsi3>
    a6f8:	8085883a 	add	r2,r16,r2
    a6fc:	10800017 	ldw	r2,0(r2)
    a700:	1000151e 	bne	r2,zero,a758 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
    a704:	04000074 	movhi	r16,1
    a708:	842b3604 	addi	r16,r16,-21288
    a70c:	e0bffd17 	ldw	r2,-12(fp)
    a710:	1009883a 	mov	r4,r2
    a714:	01400304 	movi	r5,12
    a718:	000915c0 	call	915c <__mulsi3>
    a71c:	8085883a 	add	r2,r16,r2
    a720:	e0ffff17 	ldw	r3,-4(fp)
    a724:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    a728:	00800074 	movhi	r2,1
    a72c:	10ab9c04 	addi	r2,r2,-20880
    a730:	10c00017 	ldw	r3,0(r2)
    a734:	e0bffd17 	ldw	r2,-12(fp)
    a738:	1880040e 	bge	r3,r2,a74c <alt_get_fd+0x94>
      {
        alt_max_fd = i;
    a73c:	00800074 	movhi	r2,1
    a740:	10ab9c04 	addi	r2,r2,-20880
    a744:	e0fffd17 	ldw	r3,-12(fp)
    a748:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
    a74c:	e0bffd17 	ldw	r2,-12(fp)
    a750:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
    a754:	00000606 	br	a770 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    a758:	e0bffd17 	ldw	r2,-12(fp)
    a75c:	10800044 	addi	r2,r2,1
    a760:	e0bffd15 	stw	r2,-12(fp)
    a764:	e0bffd17 	ldw	r2,-12(fp)
    a768:	10800810 	cmplti	r2,r2,32
    a76c:	103fdc1e 	bne	r2,zero,a6e0 <_gp+0xffff7888>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    a770:	e0bffe17 	ldw	r2,-8(fp)
}
    a774:	e037883a 	mov	sp,fp
    a778:	dfc00217 	ldw	ra,8(sp)
    a77c:	df000117 	ldw	fp,4(sp)
    a780:	dc000017 	ldw	r16,0(sp)
    a784:	dec00304 	addi	sp,sp,12
    a788:	f800283a 	ret

0000a78c <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
    a78c:	defffb04 	addi	sp,sp,-20
    a790:	df000415 	stw	fp,16(sp)
    a794:	df000404 	addi	fp,sp,16
    a798:	e13ffe15 	stw	r4,-8(fp)
    a79c:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
    a7a0:	e0bfff17 	ldw	r2,-4(fp)
    a7a4:	10820070 	cmpltui	r2,r2,2049
    a7a8:	1000021e 	bne	r2,zero,a7b4 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
    a7ac:	00820004 	movi	r2,2048
    a7b0:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
    a7b4:	e0fffe17 	ldw	r3,-8(fp)
    a7b8:	e0bfff17 	ldw	r2,-4(fp)
    a7bc:	1885883a 	add	r2,r3,r2
    a7c0:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    a7c4:	e0bffe17 	ldw	r2,-8(fp)
    a7c8:	e0bffc15 	stw	r2,-16(fp)
    a7cc:	00000506 	br	a7e4 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    a7d0:	e0bffc17 	ldw	r2,-16(fp)
    a7d4:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    a7d8:	e0bffc17 	ldw	r2,-16(fp)
    a7dc:	10800804 	addi	r2,r2,32
    a7e0:	e0bffc15 	stw	r2,-16(fp)
    a7e4:	e0fffc17 	ldw	r3,-16(fp)
    a7e8:	e0bffd17 	ldw	r2,-12(fp)
    a7ec:	18bff836 	bltu	r3,r2,a7d0 <_gp+0xffff7978>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    a7f0:	e0bffe17 	ldw	r2,-8(fp)
    a7f4:	108007cc 	andi	r2,r2,31
    a7f8:	10000226 	beq	r2,zero,a804 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    a7fc:	e0bffc17 	ldw	r2,-16(fp)
    a800:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    a804:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    a808:	e037883a 	mov	sp,fp
    a80c:	df000017 	ldw	fp,0(sp)
    a810:	dec00104 	addi	sp,sp,4
    a814:	f800283a 	ret

0000a818 <exit>:
    a818:	defffe04 	addi	sp,sp,-8
    a81c:	000b883a 	mov	r5,zero
    a820:	dc000015 	stw	r16,0(sp)
    a824:	dfc00115 	stw	ra,4(sp)
    a828:	2021883a 	mov	r16,r4
    a82c:	000a8800 	call	a880 <__call_exitprocs>
    a830:	8009883a 	mov	r4,r16
    a834:	000aa580 	call	aa58 <_exit>

0000a838 <memcmp>:
    a838:	30000d26 	beq	r6,zero,a870 <memcmp+0x38>
    a83c:	20c00003 	ldbu	r3,0(r4)
    a840:	28800003 	ldbu	r2,0(r5)
    a844:	18800c1e 	bne	r3,r2,a878 <memcmp+0x40>
    a848:	31bfff84 	addi	r6,r6,-2
    a84c:	01ffffc4 	movi	r7,-1
    a850:	00000406 	br	a864 <memcmp+0x2c>
    a854:	20c00003 	ldbu	r3,0(r4)
    a858:	28800003 	ldbu	r2,0(r5)
    a85c:	31bfffc4 	addi	r6,r6,-1
    a860:	1880051e 	bne	r3,r2,a878 <memcmp+0x40>
    a864:	21000044 	addi	r4,r4,1
    a868:	29400044 	addi	r5,r5,1
    a86c:	31fff91e 	bne	r6,r7,a854 <_gp+0xffff79fc>
    a870:	0005883a 	mov	r2,zero
    a874:	f800283a 	ret
    a878:	1885c83a 	sub	r2,r3,r2
    a87c:	f800283a 	ret

0000a880 <__call_exitprocs>:
    a880:	00800074 	movhi	r2,1
    a884:	10ab9604 	addi	r2,r2,-20904
    a888:	10800017 	ldw	r2,0(r2)
    a88c:	defff204 	addi	sp,sp,-56
    a890:	df000c15 	stw	fp,48(sp)
    a894:	d8800015 	stw	r2,0(sp)
    a898:	10800c04 	addi	r2,r2,48
    a89c:	dd400915 	stw	r21,36(sp)
    a8a0:	dfc00d15 	stw	ra,52(sp)
    a8a4:	ddc00b15 	stw	r23,44(sp)
    a8a8:	dd800a15 	stw	r22,40(sp)
    a8ac:	dd000815 	stw	r20,32(sp)
    a8b0:	dcc00715 	stw	r19,28(sp)
    a8b4:	dc800615 	stw	r18,24(sp)
    a8b8:	dc400515 	stw	r17,20(sp)
    a8bc:	dc000415 	stw	r16,16(sp)
    a8c0:	d9000115 	stw	r4,4(sp)
    a8c4:	2839883a 	mov	fp,r5
    a8c8:	d8800215 	stw	r2,8(sp)
    a8cc:	057fffc4 	movi	r21,-1
    a8d0:	d8800017 	ldw	r2,0(sp)
    a8d4:	dd800217 	ldw	r22,8(sp)
    a8d8:	15c00c17 	ldw	r23,48(r2)
    a8dc:	b8001b26 	beq	r23,zero,a94c <__call_exitprocs+0xcc>
    a8e0:	b9000117 	ldw	r4,4(r23)
    a8e4:	bd002217 	ldw	r20,136(r23)
    a8e8:	243fffc4 	addi	r16,r4,-1
    a8ec:	80001416 	blt	r16,zero,a940 <__call_exitprocs+0xc0>
    a8f0:	244007c4 	addi	r17,r4,31
    a8f4:	21000044 	addi	r4,r4,1
    a8f8:	8c63883a 	add	r17,r17,r17
    a8fc:	8427883a 	add	r19,r16,r16
    a900:	2109883a 	add	r4,r4,r4
    a904:	8c63883a 	add	r17,r17,r17
    a908:	9ce7883a 	add	r19,r19,r19
    a90c:	2109883a 	add	r4,r4,r4
    a910:	a463883a 	add	r17,r20,r17
    a914:	a4e7883a 	add	r19,r20,r19
    a918:	b925883a 	add	r18,r23,r4
    a91c:	e0001726 	beq	fp,zero,a97c <__call_exitprocs+0xfc>
    a920:	a0000226 	beq	r20,zero,a92c <__call_exitprocs+0xac>
    a924:	89400017 	ldw	r5,0(r17)
    a928:	2f001426 	beq	r5,fp,a97c <__call_exitprocs+0xfc>
    a92c:	843fffc4 	addi	r16,r16,-1
    a930:	8c7fff04 	addi	r17,r17,-4
    a934:	9cffff04 	addi	r19,r19,-4
    a938:	94bfff04 	addi	r18,r18,-4
    a93c:	857ff71e 	bne	r16,r21,a91c <_gp+0xffff7ac4>
    a940:	00800034 	movhi	r2,0
    a944:	10800004 	addi	r2,r2,0
    a948:	1000311e 	bne	r2,zero,aa10 <__call_exitprocs+0x190>
    a94c:	dfc00d17 	ldw	ra,52(sp)
    a950:	df000c17 	ldw	fp,48(sp)
    a954:	ddc00b17 	ldw	r23,44(sp)
    a958:	dd800a17 	ldw	r22,40(sp)
    a95c:	dd400917 	ldw	r21,36(sp)
    a960:	dd000817 	ldw	r20,32(sp)
    a964:	dcc00717 	ldw	r19,28(sp)
    a968:	dc800617 	ldw	r18,24(sp)
    a96c:	dc400517 	ldw	r17,20(sp)
    a970:	dc000417 	ldw	r16,16(sp)
    a974:	dec00e04 	addi	sp,sp,56
    a978:	f800283a 	ret
    a97c:	b9000117 	ldw	r4,4(r23)
    a980:	92000017 	ldw	r8,0(r18)
    a984:	213fffc4 	addi	r4,r4,-1
    a988:	24001a26 	beq	r4,r16,a9f4 <__call_exitprocs+0x174>
    a98c:	90000015 	stw	zero,0(r18)
    a990:	403fe626 	beq	r8,zero,a92c <_gp+0xffff7ad4>
    a994:	ba400117 	ldw	r9,4(r23)
    a998:	a0001226 	beq	r20,zero,a9e4 <__call_exitprocs+0x164>
    a99c:	00800044 	movi	r2,1
    a9a0:	1408983a 	sll	r4,r2,r16
    a9a4:	a1404017 	ldw	r5,256(r20)
    a9a8:	214a703a 	and	r5,r4,r5
    a9ac:	28000d26 	beq	r5,zero,a9e4 <__call_exitprocs+0x164>
    a9b0:	a1404117 	ldw	r5,260(r20)
    a9b4:	2148703a 	and	r4,r4,r5
    a9b8:	2000101e 	bne	r4,zero,a9fc <__call_exitprocs+0x17c>
    a9bc:	99400017 	ldw	r5,0(r19)
    a9c0:	d9000117 	ldw	r4,4(sp)
    a9c4:	da400315 	stw	r9,12(sp)
    a9c8:	403ee83a 	callr	r8
    a9cc:	da400317 	ldw	r9,12(sp)
    a9d0:	b9000117 	ldw	r4,4(r23)
    a9d4:	227fbe1e 	bne	r4,r9,a8d0 <_gp+0xffff7a78>
    a9d8:	b1000017 	ldw	r4,0(r22)
    a9dc:	25ffd326 	beq	r4,r23,a92c <_gp+0xffff7ad4>
    a9e0:	003fbb06 	br	a8d0 <_gp+0xffff7a78>
    a9e4:	da400315 	stw	r9,12(sp)
    a9e8:	403ee83a 	callr	r8
    a9ec:	da400317 	ldw	r9,12(sp)
    a9f0:	003ff706 	br	a9d0 <_gp+0xffff7b78>
    a9f4:	bc000115 	stw	r16,4(r23)
    a9f8:	003fe506 	br	a990 <_gp+0xffff7b38>
    a9fc:	99000017 	ldw	r4,0(r19)
    aa00:	da400315 	stw	r9,12(sp)
    aa04:	403ee83a 	callr	r8
    aa08:	da400317 	ldw	r9,12(sp)
    aa0c:	003ff006 	br	a9d0 <_gp+0xffff7b78>
    aa10:	b9000117 	ldw	r4,4(r23)
    aa14:	20000e1e 	bne	r4,zero,aa50 <__call_exitprocs+0x1d0>
    aa18:	b9000017 	ldw	r4,0(r23)
    aa1c:	20000826 	beq	r4,zero,aa40 <__call_exitprocs+0x1c0>
    aa20:	b1000015 	stw	r4,0(r22)
    aa24:	a0000226 	beq	r20,zero,aa30 <__call_exitprocs+0x1b0>
    aa28:	a009883a 	mov	r4,r20
    aa2c:	00000000 	call	0 <__reset-0x8000>
    aa30:	b809883a 	mov	r4,r23
    aa34:	00000000 	call	0 <__reset-0x8000>
    aa38:	b5c00017 	ldw	r23,0(r22)
    aa3c:	003fa706 	br	a8dc <_gp+0xffff7a84>
    aa40:	0007883a 	mov	r3,zero
    aa44:	b82d883a 	mov	r22,r23
    aa48:	182f883a 	mov	r23,r3
    aa4c:	003fa306 	br	a8dc <_gp+0xffff7a84>
    aa50:	b8c00017 	ldw	r3,0(r23)
    aa54:	003ffb06 	br	aa44 <_gp+0xffff7bec>

0000aa58 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    aa58:	defffc04 	addi	sp,sp,-16
    aa5c:	df000315 	stw	fp,12(sp)
    aa60:	df000304 	addi	fp,sp,12
    aa64:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    aa68:	0001883a 	nop
    aa6c:	e0bfff17 	ldw	r2,-4(fp)
    aa70:	e0bffd15 	stw	r2,-12(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  int r2 = exit_code;
    aa74:	e0bffd17 	ldw	r2,-12(fp)
    aa78:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    aa7c:	e0bffe17 	ldw	r2,-8(fp)
    aa80:	10000226 	beq	r2,zero,aa8c <_exit+0x34>
    ALT_SIM_FAIL();
    aa84:	002af070 	cmpltui	zero,zero,43969
    aa88:	00000106 	br	aa90 <_exit+0x38>
  } else {
    ALT_SIM_PASS();
    aa8c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    aa90:	003fff06 	br	aa90 <_gp+0xffff7c38>
